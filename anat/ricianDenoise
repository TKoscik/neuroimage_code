#!/bin/bash -e
#===============================================================================
# Rician Denoising
# Authors: Timothy R. Koscik, PhD
# Date: 2020-02-23
# Software: ANTs
#===============================================================================
PROC_START=$(date +%Y-%m-%dT%H:%M:%S%z)
FCN_NAME=($(basename "$0"))
DATE_SUFFIX=$(date +%Y%m%dT%H%M%S%N)
OPERATOR=$(whoami)
KERNEL="$(uname -s)"
HARDWARE="$(uname -m)"
HPC_Q=${QUEUE}
HPC_SLOTS=${NSLOTS}
KEEP=false
NO_LOG=false
umask 007

# actions on exit, write to logs, clean scratch
function egress {
  EXIT_CODE=$?
  PROC_STOP=$(date +%Y-%m-%dT%H:%M:%S%z)
  if [[ "${KEEP}" == "false" ]]; then
    if [[ -n ${DIR_SCRATCH} ]]; then
      if [[ -d ${DIR_SCRATCH} ]]; then
        if [[ "$(ls -A ${DIR_SCRATCH})" ]]; then
          rm -R ${DIR_SCRATCH}
        else
          rmdir ${DIR_SCRATCH}
        fi
      fi
    fi
  fi
  if [[ "${NO_LOG}" == "false" ]]; then
    unset LOGSTR
    LOGSTR="${OPERATOR},${DIR_PROJECT},${PID},${SID},${HARDWARE},${KERNEL},${HPC_Q},${HPC_SLOTS},${FCN_NAME},${PROC_START},${PROC_STOP},${EXIT_CODE}"
    writeLog --benchmark --string ${LOGSTR}
  fi
}
trap egress EXIT

# Parse inputs -----------------------------------------------------------------
OPTS=$(getopt -o hvklnd --long prefix:,\
dimension:,image:,mask:,model:,shrink:,patch:,search:,\
dir-save:,dir-scratch:,\
help,fcn-verbose,verbose,keep,no-log,no-png -n 'parse-options' -- "$@")
if [[ $? != 0 ]]; then
  echo "Failed parsing options" >&2
  exit 1
fi
eval set -- "$OPTS"

# Set default values for function ---------------------------------------------
PREFIX=
DIM=3
IMAGE=
MASK=
MODEL=Rician
SHRINK=1
PATCH=1
SEARCH=2
DIR_SAVE=
DIR_SCRATCH=${INC_SCRATCH}/${OPERATOR}_${DATE_SUFFIX}
HELP=false
VERBOSE=false
FCN_VERBOSE=0
NO_PNG=false

while true; do
  case "$1" in
    -h | --help) HELP=true ; shift ;;
    --fcn-verbose) FCN_VERBOSE=1 ; shift ;;
    -v | --verbose) VERBOSE=true ; shift ;;
    -k | --keep) KEEP=true ; shift ;;
    -l | --no-log) NO_LOG=true ; shift ;;
    -n | --no-png) NO_PNG=true ; shift ;;
    --prefix)  PREFIX="$2" ; shift 2 ;;
    -d | --dimension) DIM="$2" ; shift 2 ;;
    --image) IMAGE="$2" ; shift 2 ;;
    --mask) MASK="$2" ; shift 2 ;;
    --model) MODEL="$2" ; shift 2 ;;
    --shrink) SHRINK="$2" ; shift 2 ;;
    --patch) PATCH="$2" ; shift 2 ;;
    --search) SEARCH="$2" ; shift 2 ;;
    --dir-save) DIR_SAVE="$2" ; shift 2 ;;
    --dir-scratch) DIR_SCRATCH="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Usage Help -------------------------------------------------------------------
if [[ "${HELP}" == "true" ]]; then
  echo ''
  echo '------------------------------------------------------------------------'
  echo "Iowa Neuroimage Processing Core: ${FCN_NAME}"
  echo '------------------------------------------------------------------------'
  echo '  -h | --help         display command help'
  echo '  -v | --verbose      add verbose output to terminal'
  echo '  -k | --keep         keep noise image'
  echo '  -l | --no-log       disable writing to output log'
  echo '  -n | --no-png            disable PNG output'
  echo '  -d | --dimension    image dimension, 3=3D (default) or 4=4D'
  echo '  --prefix            prefix for output, default: sub-123_ses-1234abcd'
  echo '  --image             full path to image to denoise'
  echo '  --mask              full path to binary mask'
  echo '  --model             Rician (default) or Gaussian noise model'
  echo '  --shrink            shrink factor (1), large images are time-consuming'
  echo '  --patch             patch radius, default:1 (1x1x1)'
  echo '  --search            search radius, default:2 (2x2x2)'
  echo '  --dir-save          directory to save output,'
  echo '    default: ${DIR_PROJECT}/derivatives/inc/prep/sub-${PID}/ses-${SID}'
  echo '  --dir-scratch       directory for temporary workspace'
  echo ''
  NO_LOG=true
  exit 0
fi

#===============================================================================
# Rician Denoising
#===============================================================================
# Set up BIDs compliant variables and workspace --------------------------------
DIR_PROJECT=$(getDir -i ${IMAGE})
PID=$(getField -i ${IMAGE} -f sub)
SID=$(getField -i ${IMAGE} -f ses)
DIRPID=sub-${PID}
if [ -n "${SID}" ]; then DIRPID=${DIRPID}/ses-${SID}; fi
if [[ -z "${PREFIX}" ]]; then
  PREFIX=$(getBidsBase -s -i ${IMAGE})
  PREP=$(getField -i ${PREFIX} -f prep)
  if [[ -n ${PREP} ]]; then
    PREP="${PREP}+"
    PREFIX=$(modField -i ${PREFIX} -r -f prep)
  fi
fi

if [[ -z "${DIR_SAVE}" ]]; then
  DIR_SAVE=${DIR_PROJECT}/derivatives/inc/prep/${DIRPID}/anat
fi
mkdir -p ${DIR_SCRATCH}
mkdir -p ${DIR_SAVE}

# get modailty for output ------------------------------------------------------
MOD=($(getField -i ${IMAGE} -f "modality"))

# Denoise image ----------------------------------------------------------------
dn_fcn="DenoiseImage -d ${DIM}"
dn_fcn="${dn_fcn} -n ${MODEL}"
dn_fcn="${dn_fcn} -s ${SHRINK}"
dn_fcn="${dn_fcn} -p ${PATCH}"
dn_fcn="${dn_fcn} -r ${SEARCH}"
dn_fcn="${dn_fcn} -v ${FCN_VERBOSE}"
dn_fcn="${dn_fcn} -i ${IMAGE}"
if [ -n "${MASK}" ]; then dn_fcn="${dn_fcn} -x ${MASK}"; fi
dn_fcn="${dn_fcn} -o [${DIR_SCRATCH}/${PREFIX}_prep-${PREP}denoise_${MOD}.nii.gz,"
dn_fcn="${dn_fcn}${DIR_SCRATCH}/${PREFIX}_prep-${PREP}noise_${MOD}.nii.gz]"

if [[ "${VERBOSE}" == "true" ]]; then echo -e "Denoising Image >>>\n\t${dn_fcn}"; fi
#writeScript -d ${DIR_PROJECT} -p ${PREFIX} -s "${dn_fcn}"
eval ${dn_fcn}

# generate PNG -----------------------------------------------------------------
if [[ "${NO_PNG}" == "false" ]]; then
  make3Dpng --bg ${DIR_SCRATCH}/${PREFIX}_prep-${PREP}denoise_${MOD}.nii.gz \
    --dir-save ${DIR_SAVE}
  make3Dpng --bg ${DIR_SCRATCH}/${PREFIX}_prep-${PREP}noise_${MOD}.nii.gz \
    --bg-color "viridis" \
    --dir-save ${DIR_SAVE}
fi

# copy output to final file ----------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tmoving denoised output to ${DIR_SAVE}"; fi
mv ${DIR_SCRATCH}/${PREFIX}_prep-${PREP}denoise_${MOD}.nii.gz ${DIR_SAVE}/

# copy noise image if selected -------------------------------------------------
if [[ "${KEEP}" == "true" ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tmoving noise image to ${DIR_SAVE}"; fi
  mv ${DIR_SCRATCH}/${PREFIX}_prep-${PREP}noise_${MOD}.nii.gz ${DIR_SAVE}/
fi

#===============================================================================
# End of Function
#===============================================================================
if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tDONE"; fi
exit 0


