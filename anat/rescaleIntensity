#!/bin/bash -e
#===============================================================================
# rescaleImage
# Authors: Timothy R. Koscik, PhD
# Date: 2021-04-19
#===============================================================================
PROC_START=$(date +%Y-%m-%dT%H:%M:%S%z)
FCN_NAME=($(basename "$0"))
DATE_SUFFIX=$(date +%Y%m%dT%H%M%S%N)
OPERATOR=$(whoami)
KERNEL="$(uname -s)"
HARDWARE="$(uname -m)"
HPC_Q=${QUEUE}
HPC_SLOTS=${NSLOTS}
KEEP=false
NO_LOG=false
umask 007
# actions on exit, write to logs, clean scratch
function egress {
  EXIT_CODE=$?
  PROC_STOP=$(date +%Y-%m-%dT%H:%M:%S%z)
  if [[ "${KEEP}" == "false" ]]; then
    if [[ -n ${DIR_SCRATCH} ]]; then
      if [[ -d ${DIR_SCRATCH} ]]; then
        if [[ "$(ls -A ${DIR_SCRATCH})" ]]; then
          rm -R ${DIR_SCRATCH}
        else
          rmdir ${DIR_SCRATCH}
        fi
      fi
    fi
  fi
  if [[ "${NO_LOG}" == "false" ]]; then
    unset LOGSTR
    LOGSTR="${OPERATOR},${DIR_PROJECT},${PID},${SID},${HARDWARE},${KERNEL},${HPC_Q},${HPC_SLOTS},${FCN_NAME},${PROC_START},${PROC_STOP},${EXIT_CODE}"
    writeLog --benchmark --string ${LOGSTR}
  fi
}
trap egress EXIT
# Parse inputs -----------------------------------------------------------------
OPTS=$(getopt -o hvkln --long prefix:,\
image:,mask:,\
nan:,keep-neg,\
truncate:,lo:,hi:,not-p,zero-value:,\
max:,datatype:,\
dir-save:,dir-scratch:,\
help,verbose,no-log,no-png -n 'parse-options' -- "$@")
if [[ $? != 0 ]]; then
  echo "Failed parsing options" >&2
  exit 1
fi
eval set -- "$OPTS"
# Set default values for function ---------------------------------------------
PREFIX=
IMAGE=
MASK=
NAN=0
KEEP_NEG=false
TRUNCATE=false
LO=0
HI=1
NOT_P=false
ZERO_VALUE="lo"
MAX="10000"
DATATYPE="short"
DIR_SAVE=
DIR_SCRATCH=${INC_SCRATCH}/${OPERATOR}_${DATE_SUFFIX}
HELP=false
VERBOSE=false
NO_PNG=false

while true; do
  case "$1" in
    -h | --help) HELP=true ; shift ;;
    -v | --verbose) VERBOSE=true ; shift ;;
    -l | --no-log) NO_LOG=true ; shift ;;
    -n | --no-png) NO_PNG=true ; shift ;;
    --prefix)  PREFIX="$2" ; shift 2 ;;
    --image) IMAGE="$2" ; shift 2 ;;
    --mask) MASK="$2" ; shift 2 ;;
    --nan) NAN="$2" ; shift 2 ;;
    --keep-neg) KEEP_NEG=true ; shift ;;
    --truncate) TRUNCATE=true ; shift ;;
    --lo) LO="$2" ; shift 2 ;;
    --hi) HI="$2" ; shift 2 ;;
    --not-p) NOT_P=true ; shift  ;;
    --zero-value) ZERO_VALUE="$2" ; shift 2 ;;
    --max) MAX="$2" ; shift 2 ;;
    --datatype) DATATYPE="$2" ; shift 2 ;;
    --dir-save) DIR_SAVE="$2" ; shift 2 ;;
    --dir-scratch) DIR_SCRATCH="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Usage Help -------------------------------------------------------------------
if [[ "${HELP}" == "true" ]]; then
  echo ''
  echo '------------------------------------------------------------------------'
  echo "Iowa Neuroimage Processing Core: ${FCN_NAME}"
  echo '------------------------------------------------------------------------'
  echo '  -h | --help      display command help'
  echo '  -v | --verbose   add verbose output to log file'
  echo '  -k | --keep      keep preliminary processing steps'
  echo '  -l | --no-log    disable writing to output log'
  echo '  -n | --no-png    disable making png of output'
  echo '  --prefix         prefix for output'
  echo '                     default: sub-123_ses-1234abcd_prep-rescale'
  echo '  --image          input nii.gz file'
  echo '  --mask           binary mask of region for calculating rescale values'
  echo '  --nan            NANs must be removed before rescaling, specify value'
  echo '                   to convert NANs to, default=0'
  echo '  --keep-neg       toggle to keep negative values, default FALSE'
  echo '                   applied before truncation or other processing'
  echo '  --truncate       toggle truncation of values, will use mask if needed'
  echo '  --not-p          toggle interpreting LO and HI inputs as values'
  echo '                   rather than percentiles'
  echo '  --lo             lower threshold percentile (or value), default=0'
  echo '  --hi             upper threshold percentile (or value), default=1'
  echo '  --zero-value     set the zero point in the image, default="lo" which'
  echo '                   indicates to use the lower truncation value'
  echo '                   set to "false" to disable'
  echo '  --max            set max value for output, default is 10000,'
  echo '                   unless datatype is char then the default is 255'
  echo '  --datatype       desired output datatype, not case sensitive'
  echo '                   options: INT8   (CHAR, signed 8-bit integer)'
  echo '                  <DEFAULT> INT16  (SHORT, signed 16-bit integer)'
  echo '                            INT32  (INT, signed 32-bit integer)'
  echo '                            FLOAT  (FLOAT32, 32-bit floating point)'
  echo '                            DOUBLE  (DOUBLE64,FLOAT64, 64-bit floating point)'
  echo '                            NULL   No Conversion'
  echo '  --dir-save       directory to save output,'
  echo '      default: ${DIR_PROJECT}/derivatives/inc/prep/sub-${PID}/ses-${SID}'
  echo '  --dir-scratch    directory for temporary workspace'
  echo ''
  NO_LOG=true
  exit 0
fi

#===============================================================================
# Rescale Intensity
#===============================================================================
# check datatype ---------------------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then echo "[INC: ${FCN_NAME}] check datatype"; fi
case ${DATATYPE,,} in
  int8|char) DATATYPE="char" ;;
  int16|short) DATATYPE="short" ;;
  int32|int) DATATYPE="int" ;;
  float|float32) DATATYPE="float" ;;
  double|double64|float64) DATATYPE="double" ;;
esac

# set default MAX_VALUE --------------------------------------------------------
if [[ -z ${MAX} ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then
    echo "[INC: ${FCN_NAME}] set default MAXIMUM OUTPUT VALUE"
  fi
  MAX=10000
  if [[ "${DATATYPE,,}" == "char" ]]; then
    MAX=255
  fi
fi

# check desired output range ---------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then
  echo "[INC: ${FCN_NAME}] check MAXIMUM OUTPUT VALUE relative to DATATYPE"
fi
if [[ "${DATATYPE,,}" == "char" ]] && [[ ${MAX} -gt 255 ]]; then
  echo "[INC: ${FCN_NAME}]: Output value out of range. INT8/CHAR Max = 255"
  exit 1
fi
if [[ "${DATATYPE,,}" == "short" ]] && [[ ${MAX} -gt 32767 ]]; then
  echo "[INC: ${FCN_NAME}]: Output value out of range. INT16/SHORT Max = 32767"
  exit 1
fi
if [[ "${DATATYPE,,}" == "int" ]] && [[ ${MAX} -gt 2147483648 ]]; then
  echo "[INC: ${FCN_NAME}]: Output value out of range. INT32/INT Max = 2147483648"
  exit 1
fi

# Set up BIDs compliant variables and workspace --------------------------------
if [[ "${VERBOSE}" == "true" ]]; then
  echo "[INC: ${FCN_NAME}] setup BIDS information"
fi
DIR_PROJECT=$(getDir -i ${IMAGE})
PID=$(getField -i ${IMAGE} -f sub)
SID=$(getField -i ${IMAGE} -f ses)
DIRPID=sub-${PID}
if [ -n "${SID}" ]; then DIRPID=${DIRPID}/ses-${SID}; fi
if [[ -z "${PREFIX}" ]]; then
  PREFIX=$(getBidsBase -s -i ${IMAGE})
  PREFIX=$(modField -i ${PREFIX} -a -f prep -v rescale)
fi
if [[ -z "${DIR_SAVE}" ]]; then
  DIR_SAVE=${DIR_PROJECT}/derivatives/inc/prep/${DIRPID}
fi
mkdir -p ${DIR_SCRATCH}
mkdir -p ${DIR_SAVE}

# gather modality for output ---------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then
  echo "[INC: ${FCN_NAME}] get MODALITY for output filename"
fi
MOD=($(getField -i ${IMAGE} -f "modality"))
if [[ "${VERBOSE}" == "true" ]]; then
  echo -e "\t${MOD}"
fi

# temporary filename
IMGRS=${DIR_SCRATCH}/${PREFIX}_${MOD}.nii.gz

# deal with NANs ---------------------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then
  echo "[INC: ${FCN_NAME}] set NANs to ${NAN}"
fi
fslmaths ${IMAGE} -nanm -mul ${NAN} ${DIR_SCRATCH}/mask-nan.nii.gz
fslmaths ${IMAGE} -nan -add ${DIR_SCRATCH}/mask-nan.nii.gz ${IMGRS}

# deal with negative values ----------------------------------------------------
if [[ "${KEEP_NEG}" == "false" ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then
    echo "[INC: ${FCN_NAME}] removing NEGATIVE values"
  fi
  fslmaths ${IMGRS} -thr 0 ${IMGRS}
else
  if [[ "${VERBOSE}" == "true" ]]; then
    echo "[INC: ${FCN_NAME}] creating NEGATIVE value mask"
  fi
  fslmaths ${IMGRS} -uthr 0 -abs -bin -mul -2 -add 1 ${DIR_SCRATCH}/mask-neg.nii.gz
  
  if [[ "${VERBOSE}" == "true" ]]; then
    echo "[INC: ${FCN_NAME}] using ABSOLUTE VALUE for processing"
  fi
  fslmaths ${IMGRS} -abs -thr 0 ${IMGRS}
fi

# truncate intensities ---------------------------------------------------------
## set 0 point to lower bound of truncation
if [[ ${TRUNCATE,,} == "true" ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then
    echo "[INC: ${FCN_NAME}] TRUNCATING image intensity values"
  fi
  if [[ "${NOT_P}" == "true" ]]; then
    if [[ "${VERBOSE}" == "true" ]]; then
      echo "[INC: ${FCN_NAME}] truncating by INTENSITY VALUE"
    fi
    fslmaths ${IMGRS} -uthr ${LO} -bin -mul ${LO} ${DIR_SCRATCH}/lo.nii.gz
    fslmaths ${IMGRS} -thr ${HI} -bin -mul ${HI} ${DIR_SCRATCH}/hi.nii.gz
    fslmaths ${IMGRS} -thr ${LO} -uthr ${HI} \
      -add ${DIR_SCRATCH}/lo.nii.gz -add ${DIR_SCRATCH}/hi.nii.gz ${IMGRS} 
  else
    if [[ "${VERBOSE}" == "true" ]]; then
      echo "[INC: ${FCN_NAME}] truncating by INTENSITY PERCENTILE"
    fi
    if [[ -n ${MASK} ]]; then
      ImageMath 3 ${IMGRS} TruncateImageIntensity ${IMGRS} ${LO} ${HI} 256 ${MASK}
    else
      ImageMath 3 ${IMGRS} TruncateImageIntensity ${IMGRS} ${LO} ${HI} 256
    fi
  fi
fi

# set zero value in image ------------------------------------------------------
if [[ "${ZERO_VALUE}" != "false" ]]; then
  if [[ "${ZERO_VALUE}" == "lo" ]]; then
    if [[ "${NOT_P}" == "true" ]]; then
      ZERO_VALUE=${LO}
    else
      if [[ -n ${MASK} ]]; then
        ZERO_VALUE=($(fslstats ${IMGRS} -k ${MASK} -P 0))
      else
        ZERO_VALUE=($(fslstats ${IMGRS} -P 0))
      fi
    fi
  fi
  if [[ "${VERBOSE}" == "true" ]]; then
    echo "[INC: ${FCN_NAME}] setting ${ZERO_VALUE} to ZERO"
  fi
  fslmaths ${IMGRS} -sub ${ZERO_VALUE} -thr 0 ${IMGRS}
fi

# get denominator for value normalization --------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then
  echo "[INC: ${FCN_NAME}] get denominators for NORMALIZING values"
fi
if [[ -n ${MASK} ]]; then
  MINMAX=($(fslstats ${IMGRS} -k ${MASK} -R))
else
  MINMAX=($(fslstats ${IMGRS} -R))
fi
DENOM=$(ezMath -x "${MINMAX[1]}-${MINMAX[0]}" -d 4)
if [[ "${VERBOSE}" == "true" ]]; then
  echo -e "\tdenominator=${DENOM}"
fi

# convert to final range and datatype ------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then
  echo "[INC: ${FCN_NAME}] convert to FINAL RANGE and DATATYPE"
fi
fslmaths -dt float ${IMGRS} -div ${DENOM} -mul ${MAX} ${IMGRS} -odt ${DATATYPE}

# restore negatives if necessary -----------------------------------------------
if [[ "${KEEP_NEG}" == "true" ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then
    echo "[INC: ${FCN_NAME}] restore NEGATIVE VALUES"
  fi
  fslmaths ${IMGRS} -mul ${DIR_SCRATCH}/mask-neg.nii.gz \
    ${IMGRS} -odt ${DATATYPE}
fi

# final verbose output ---------------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then
  MINMAX=($(fslstats ${IMGRS} -R))
  echo -e "\tFINAL RANGE: ${MINMAX[0]} - ${MINMAX[1]}"
  if [[ -n ${MASK} ]]; then
    MINMAX=($(fslstats ${IMGRS} -k ${MASK} -R))
    echo -e "\tFINAL RANGE IN MASK: ${MINMAX[0]} - ${MINMAX[1]}"
  fi
fi

# copy output to final file ----------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then
  echo "[INC: ${FCN_NAME}] save RESCALED OUTPUT"
fi
mv ${IMGRS} ${DIR_SAVE}/

# generate out PNG -------------------------------------------------------------
if [[ "${NO_PNG}" == "false" ]]; then
  make3Dpng --bg ${DIR_SAVE}/${PREFIX}_${MOD}.nii.gz
fi

#===============================================================================
# End of Function
#===============================================================================
exit 0


