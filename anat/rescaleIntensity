#!/bin/bash -e
#===============================================================================
# rescaleImage
# Authors: Timothy R. Koscik, PhD
# Date: 2021-04-19
#===============================================================================
PROC_START=$(date +%Y-%m-%dT%H:%M:%S%z)
FCN_NAME=($(basename "$0"))
DATE_SUFFIX=$(date +%Y%m%dT%H%M%S%N)
OPERATOR=$(whoami)
KERNEL="$(uname -s)"
HARDWARE="$(uname -m)"
HPC_Q=${QUEUE}
HPC_SLOTS=${NSLOTS}
KEEP=false
NO_LOG=false
umask 007
# actions on exit, write to logs, clean scratch
function egress {
  EXIT_CODE=$?
  PROC_STOP=$(date +%Y-%m-%dT%H:%M:%S%z)
  if [[ "${KEEP}" == "false" ]]; then
    if [[ -n ${DIR_SCRATCH} ]]; then
      if [[ -d ${DIR_SCRATCH} ]]; then
        if [[ "$(ls -A ${DIR_SCRATCH})" ]]; then
          rm -R ${DIR_SCRATCH}
        else
          rmdir ${DIR_SCRATCH}
        fi
      fi
    fi
  fi
  if [[ "${NO_LOG}" == "false" ]]; then
    unset LOGSTR
    LOGSTR="${OPERATOR},${DIR_PROJECT},${PID},${SID},${HARDWARE},${KERNEL},${HPC_Q},${HPC_SLOTS},${FCN_NAME},${PROC_START},${PROC_STOP},${EXIT_CODE}"
    writeLog --benchmark --string ${LOGSTR}
  fi
}
trap egress EXIT
# Parse inputs -----------------------------------------------------------------
OPTS=$(getopt -o hvkln --long prefix:,\
image:,mask:,keep-neg,lo:,hi:,datatype:,\
dir-save:,dir-scratch:,\
help,verbose,no-log,no-png -n 'parse-options' -- "$@")
if [[ $? != 0 ]]; then
  echo "Failed parsing options" >&2
  exit 1
fi
eval set -- "$OPTS"
# Set default values for function ---------------------------------------------
PREFIX=
IMAGE=
MASK=
KEEP_NEG=false
LO=0
HI=0.999
DATATYPE="INT"
DIR_SAVE=
DIR_SCRATCH=${INC_SCRATCH}/${OPERATOR}_${DATE_SUFFIX}
HELP=false
VERBOSE=0
NO_PNG=false

while true; do
  case "$1" in
    -h | --help) HELP=true ; shift ;;
    -v | --verbose) VERBOSE=1 ; shift ;;
    -l | --no-log) NO_LOG=true ; shift ;;
    -n | --no-png) NO_PNG=true ; shift ;;
    --prefix)  PREFIX="$2" ; shift 2 ;;
    --image) IMAGE="$2" ; shift 2 ;;
    --mask) MASK="$2" ; shift 2 ;;
    --keep-neg) KEEP_NEG=true ; shift ;;
    --lo) LO="$2" ; shift 2 ;;
    --hi) HI="$2" ; shift 2 ;;
    --datatype) DATATYPE="$2" ; shift 2 ;;
    --dir-save) DIR_SAVE="$2" ; shift 2 ;;
    --dir-plot) DIR_PLOT="$2" ; shift 2 ;;
    --dir-scratch) DIR_SCRATCH="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Usage Help -------------------------------------------------------------------
if [[ "${HELP}" == "true" ]]; then
  echo ''
  echo '------------------------------------------------------------------------'
  echo "Iowa Neuroimage Processing Core: ${FCN_NAME}"
  echo '------------------------------------------------------------------------'
  echo '  -h | --help      display command help'
  echo '  -v | --verbose   add verbose output to log file'
  echo '  -k | --keep      keep preliminary processing steps'
  echo '  -l | --no-log    disable writing to output log'
  echo '  --prefix         prefix for output, default: sub-123_ses-1234abcd'
  echo '  --image          input nii.gz file'
  echo '  --mask           estimate intensity limtis within mask'
  echo '  --keep-neg       toggle to keep negative values, default no'
  echo '  --lo             lower threshold as percentile of intensity,'
  echo '                   default=0, applied after thresholding at 0 if'
  echo '                   not keeping negative values'
  echo '  -hi              upper threshold as percentil of intensity,'
  echo '                   applied after discarding/keeping negative values'
  echo '                   default=0.9999'
  echo '  --datatype       desired output datatype, default="INT" (signed integer)'
  echo '  --dir-save       directory to save output,'
  echo '         default: ${DIR_PROJECT}/derivatives/inc/prep/sub-${PID}/ses-${SID}'
  echo '  --dir-scratch    directory for temporary workspace'
  echo ''
  NO_LOG=true
  exit 0
fi

#===============================================================================
# Rescale Intensity
#===============================================================================
# Set up BIDs compliant variables and workspace --------------------------------
DIR_PROJECT=$(getDir -i ${IMAGE})
PID=$(getField -i ${IMAGE} -f sub)
SID=$(getField -i ${IMAGE} -f ses)
DIRPID=sub-${PID}
if [ -n "${SID}" ]; then DIRPID=${DIRPID}/ses-${SID}; fi
if [[ -z "${PREFIX}" ]]; then
  PREFIX=$(getBidsBase -s -i ${IMAGE})
  PREP=$(getField -i ${PREFIX} -f prep)
  if [[ -n ${PREP} ]]; then
    PREP="${PREP}+"
    PREFIX=$(modField -i ${PREFIX} -r -f prep)
  fi
fi
if [[ -z "${DIR_SAVE}" ]]; then 
  DIR_SAVE=${DIR_PROJECT}/derivatives/inc/prep/${DIRPID}
fi
mkdir -p ${DIR_SCRATCH}
mkdir -p ${DIR_SAVE}

# gather modality for output
MOD=($(getField -i ${IMAGE} -f "modality"))

# set inputs and outputs
SRC=${IMAGE}
TRG=${DIR_SCRATCH}/${PREFIX}_prep-rescale_${MOD}.nii.gz

# cutoff negative values if desired
if [[ "${RM_NEG}" == "true" ]]; then
  fslmaths ${IMAGE} -thr 0 ${TRG}
  SRC=${TRG}
fi

# truncate at desired percentile
ImageMath 3 ${TRG} TruncateImageIntensity ${SRC} ${LO} ${HI} 100

# convert datatype
if [[ "${DATATYPE,,}" != "null" ]]; then
  case ${DATATYPE,,} in
    float) DT=0 ;;
    uchar) DT=1 ;;
    ushort) DT=2 ;;
    uint) DT=3 ;;
    ulong) DT=4 ;;
    char) DT=5 ;;
    short) DT=6 ;;
    int) DT=7 ;;
    long) DT=8 ;;
    floatvec) DT=9 ;;
    veccomp) DT=10 ;;
    timecomp) DT=11 ;;
    floatvec) DT=12 ;;
  esac
  ConvertImage 3 ${TRG} ${TRG} ${DT}
fi

#  copy output to final file
mv ${TRG} ${DIR_SAVE}/${PREFIX}_prep-rescale_${MOD}.nii.gz

if [[ "${NO_PNG}" == "false" ]]; then
  make3Dpng --bg ${DIR_SAVE}/${PREFIX}_prep-rescale_${MOD}.nii.gz
fi

#===============================================================================
# End of Function
#===============================================================================
exit 0


