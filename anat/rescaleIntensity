#!/bin/bash -e
#===============================================================================
# rescaleImage
# Authors: Timothy R. Koscik, PhD
# Date: 2021-04-19
#===============================================================================
PROC_START=$(date +%Y-%m-%dT%H:%M:%S%z)
FCN_NAME=($(basename "$0"))
DATE_SUFFIX=$(date +%Y%m%dT%H%M%S%N)
OPERATOR=$(whoami)
KERNEL="$(uname -s)"
HARDWARE="$(uname -m)"
HPC_Q=${QUEUE}
HPC_SLOTS=${NSLOTS}
KEEP=false
NO_LOG=false
umask 007
# actions on exit, write to logs, clean scratch
function egress {
  EXIT_CODE=$?
  PROC_STOP=$(date +%Y-%m-%dT%H:%M:%S%z)
  if [[ "${KEEP}" == "false" ]]; then
    if [[ -n ${DIR_SCRATCH} ]]; then
      if [[ -d ${DIR_SCRATCH} ]]; then
        if [[ "$(ls -A ${DIR_SCRATCH})" ]]; then
          rm -R ${DIR_SCRATCH}
        else
          rmdir ${DIR_SCRATCH}
        fi
      fi
    fi
  fi
  if [[ "${NO_LOG}" == "false" ]]; then
    unset LOGSTR
    LOGSTR="${OPERATOR},${DIR_PROJECT},${PID},${SID},${HARDWARE},${KERNEL},${HPC_Q},${HPC_SLOTS},${FCN_NAME},${PROC_START},${PROC_STOP},${EXIT_CODE}"
    writeLog --benchmark --string ${LOGSTR}
  fi
}
trap egress EXIT
# Parse inputs -----------------------------------------------------------------
OPTS=$(getopt -o hvkln --long prefix:,\
image:,mask:,keep-neg,lo:,hi:,truncate-value:,max:,\
datatype:,\
dir-save:,dir-scratch:,\
help,verbose,no-log,no-png -n 'parse-options' -- "$@")
if [[ $? != 0 ]]; then
  echo "Failed parsing options" >&2
  exit 1
fi
eval set -- "$OPTS"
# Set default values for function ---------------------------------------------
PREFIX=
IMAGE=
MASK
KEEP_NEG=false
LO=0
HI=1
TRUNCATE_VALUE=false
MAX="10000"
DATATYPE="short"
DIR_SAVE=
DIR_SCRATCH=${INC_SCRATCH}/${OPERATOR}_${DATE_SUFFIX}
HELP=false
VERBOSE=0
NO_PNG=false

while true; do
  case "$1" in
    -h | --help) HELP=true ; shift ;;
    -v | --verbose) VERBOSE=1 ; shift ;;
    -l | --no-log) NO_LOG=true ; shift ;;
    -n | --no-png) NO_PNG=true ; shift ;;
    --prefix)  PREFIX="$2" ; shift 2 ;;
    --image) IMAGE="$2" ; shift 2 ;;
    --mask) MASK="$2" ; shift 2 ;;
    --keep-neg) KEEP_NEG=true ; shift ;;
    --lo) LO="$2" ; shift 2 ;;
    --hi) HI="$2" ; shift 2 ;;
    --truncate-value) TRUNCATE_VALUE=true ; shift ;;
    --max) MAX_VALUE="$2" ; shift 2 ;;
    --datatype) DATATYPE="$2" ; shift 2 ;;
    --dir-save) DIR_SAVE="$2" ; shift 2 ;;
    --dir-scratch) DIR_SCRATCH="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Usage Help -------------------------------------------------------------------
if [[ "${HELP}" == "true" ]]; then
  echo ''
  echo '------------------------------------------------------------------------'
  echo "Iowa Neuroimage Processing Core: ${FCN_NAME}"
  echo '------------------------------------------------------------------------'
  echo '  -h | --help      display command help'
  echo '  -v | --verbose   add verbose output to log file'
  echo '  -k | --keep      keep preliminary processing steps'
  echo '  -l | --no-log    disable writing to output log'
  echo '  -n | --no-png    disable making png of output'
  echo '  --prefix         prefix for output'
  echo '                     default: sub-123_ses-1234abcd_prep-rescale'
  echo '  --image          input nii.gz file'
  echo '  --keep-neg       toggle to keep negative values, default no'
  echo '  --lo             lower threshold as percentile of intensity,'
  echo '                   default=0, applied after thresholding at 0 if'
  echo '                   not keeping negative values'
  echo '  --hi             upper threshold as percentil of intensity,'
  echo '                   applied after discarding/keeping negative values'
  echo '                   default=1'
  echo '  --datatype       desired output datatype, not case sensitive'
  echo '                   options: INT8   (CHAR, signed 8-bit integer)'
  echo '                  <DEFAULT> INT16  (SHORT, signed 16-bit integer)'
  echo '                            INT32  (INT, signed 32-bit integer)'
  echo '                            FLOAT  (FLOAT32, 32-bit floating point)'
  echo '                            DOUBLE  (DOUBLE64,FLOAT64, 64-bit floating point)'
  echo '                            NULL   No Conversion'
  echo '  --dir-save       directory to save output,'
  echo '      default: ${DIR_PROJECT}/derivatives/inc/prep/sub-${PID}/ses-${SID}'
  echo '  --dir-scratch    directory for temporary workspace'
  echo 'NOTE: given the default options the default behaviour of this'
  echo '      function is to wipe out negative values and convert to datatype'
  echo '      to 16-bit unsigned integers, and the intensity values are scaled'
  echo '      to the dynamic range of this datatype'
  echo ''
  NO_LOG=true
  exit 0
fi

#===============================================================================
# Rescale Intensity
#===============================================================================
# check datatype ---------------------------------------------------------------
case ${DATATYPE,,} in
  int8|char) DATATYPE="char" ;;
  int16|short) DATATYPE="short" ;;
  int32|int) DATATYPE="int" ;;
  float|float32) DATATYPE="float" ;;
  double|double64|float64) DATATYPE="double" ;;
esac

# set default MAX_VALUE --------------------------------------------------------
if [[ -z ${MAX} ]]; then
  MAX=10000
  if [[ "${DATATYPE,,}" == "char" ]] ; then
    MAX=255
  fi
fi

# check desired output range ---------------------------------------------------
if [[ "${DATATYPE,,}" == "char" ]] && [[ ${MAX} -gt 255 ]]; then
  echo "[INC: ${FCN_NAME}]: Output value out of range. INT8/CHAR Max = 255"
  exit 1
fi
if [[ "${DATATYPE,,}" == "short" ]] && [[ ${MAX} -gt 32767 ]]; then
  echo "[INC: ${FCN_NAME}]: Output value out of range. INT16/SHORT Max = 32767"
  exit 1
fi
if [[ "${DATATYPE,,}" == "int" ]] && [[ ${MAX} -gt 2147483648 ]]; then
  echo "[INC: ${FCN_NAME}]: Output value out of range. INT32/INT Max = 2147483648"
  exit 1
fi

# Set up BIDs compliant variables and workspace --------------------------------
DIR_PROJECT=$(getDir -i ${IMAGE})
PID=$(getField -i ${IMAGE} -f sub)
SID=$(getField -i ${IMAGE} -f ses)
DIRPID=sub-${PID}
if [ -n "${SID}" ]; then DIRPID=${DIRPID}/ses-${SID}; fi
if [[ -z "${PREFIX}" ]]; then
  PREFIX=$(getBidsBase -s -i ${IMAGE})
  PREFIX=$(modField -i ${PREFIX} -a -f prep -v rescale)
fi
if [[ -z "${DIR_SAVE}" ]]; then 
  DIR_SAVE=${DIR_PROJECT}/derivatives/inc/prep/${DIRPID}
fi
mkdir -p ${DIR_SCRATCH}
mkdir -p ${DIR_SAVE}

# gather modality for output ---------------------------------------------------
MOD=($(getField -i ${IMAGE} -f "modality"))

# deal with negative values ----------------------------------------------------
if [[ "${KEEP_NEG}" == "false" ]]; then
  fslmaths ${IMAGE} -thr 0 ${DIR_SCRATCH}/${PREFIX}_${MOD}.nii.gz
else
  ## make negative mask 1/-1 - - - - - - - - - - - - - - - - - - - - - - - - - -
  fslmaths ${IMAGE} -uthr 0 -abs -bin -mul -2 -add 1 \
    ${DIR_SCRATCH}/${PREFIX}_${MOD}_mask-neg.nii.gz
  ## convert to absolute value for processing - - - - - - - - - - - - - - - - - 
  fslmaths ${IMAGE} -abs -thr 0 ${DIR_SCRATCH}/${PREFIX}_${MOD}.nii.gz
fi
IMAGE_RS=${DIR_SCRATCH}/${PREFIX}_${MOD}.nii.gz

# truncate intensities ---------------------------------------------------------
## set 0 point to lower bound of truncation
if [[ ${TRUNCATE_VALUE,,} == "false" ]]; then
  if [[ -n ${MASK}]]; then
    LO=$(fslstats ${IMAGE_RS} -k ${MASK} -p ${LO})
    HI=$(fslstats ${IMAGE_RS} -k ${MASK} -p ${HI})
  else
    LO=$(fslstats ${IMAGE_RS} -p ${LO})
    HI=$(fslstats ${IMAGE_RS} -p ${HI})
  fi
fi
fslmaths ${IMAGE_RS} -uthr ${HI} -bin -mul ${HI} -sub ${LO} -thr 0 \
  ${DIR_SCRATCH}/upper_trunc_roi.nii.gz
fslmaths ${IMAGE_RS} -thr ${LO} -uthr ${HI} -sub ${LO} \
  -add ${DIR_SCRATCH}/upper_trunc_roi.nii.gz \
  ${IMAGE_RS}

# get denominator for normailzation --------------------------------------------
MINMAX=($(fslstats ${IMAGE_RS} -a -R))
DENOM=$(ezMath "${MINMAX[1]}-${MINMAX[0]}" -d 4)

# convert to final range and datatype ------------------------------------------
fslmaths -dt float ${IMAGE_RS} -div ${DENOM} -mul ${MAX} ${IMAGE_RS} -odt ${DATATYPE}

# restore negatives if necessary -----------------------------------------------
if [[ "${KEEP_NEG}" == "true" ]]; then
  fslmaths ${IMAGE_RS} \
    -mul ${DIR_SCRATCH}/${PREFIX}_${MOD}_mask-neg.nii.gz \
    ${IMAGE_RS} -odt ${DATATYPE}
fi

# copy output to final file ----------------------------------------------------
mv ${IMAGE_RS} ${DIR_SAVE}/${PREFIX}_${MOD}.nii.gz

# generate out PNG -------------------------------------------------------------
if [[ "${NO_PNG}" == "false" ]]; then
  make3Dpng --bg ${DIR_SAVE}/${PREFIX}_${MOD}.nii.gz
fi

#===============================================================================
# End of Function
#===============================================================================
exit 0

