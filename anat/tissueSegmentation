#!/bin/bash -e
#===============================================================================
# K-Means Tissue Segmentation
# Authors: Timothy R. Koscik
# Date: 2020-03-03
# NOTES:
# -implement SAMSEG tissue segmentation option
#===============================================================================
PROC_START=$(date +%Y-%m-%dT%H:%M:%S%z)
FCN_NAME=($(basename "$0"))
DATE_SUFFIX=$(date +%Y%m%dT%H%M%S%N)
OPERATOR=$(whoami)
KERNEL="$(uname -s)"
HARDWARE="$(uname -m)"
HPC_Q=${QUEUE}
HPC_SLOTS=${NSLOTS}
KEEP=false
NO_LOG=false
umask 007

# actions on exit, write to logs, clean scratch
function egress {
  EXIT_CODE=$?
  PROC_STOP=$(date +%Y-%m-%dT%H:%M:%S%z)
  if [[ "${KEEP}" == "false" ]]; then
    if [[ -n ${DIR_SCRATCH} ]]; then
      if [[ -d ${DIR_SCRATCH} ]]; then
        if [[ "$(ls -A ${DIR_SCRATCH})" ]]; then
          rm -R ${DIR_SCRATCH}
        else
          rmdir ${DIR_SCRATCH}
        fi
      fi
    fi
  fi
  if [[ "${NO_LOG}" == "false" ]]; then
    unset LOGSTR
    LOGSTR="${OPERATOR},${DIR_PROJECT},${PID},${SID},${HARDWARE},${KERNEL},${HPC_Q},${HPC_SLOTS},${FCN_NAME},${PROC_START},${PROC_STOP},${EXIT_CODE}"
    writeLog --benchmark --string ${LOGSTR}
  fi
}
trap egress EXIT

# Parse inputs -----------------------------------------------------------------
OPTS=$(getopt -o hnvkl --long prefix:,\
image:,mask:,mask-dil:,n-class:,no-gmm-seed,class-label:,partial-set:,use-partial,\
dimension:,initialization:,init-opts:,convergence:,likelihood-model:,mrf:,use-random:,posterior-formulation:,\
dir-save:,dir-scratch:\
help,no-png,verbose,ants-verbose,keep,no-log -n 'parse-options' -- "$@")
if [[ $? != 0 ]]; then
  echo "Failed parsing options" >&2
  exit 1
fi
eval set -- "$OPTS"

# Set default values for function ---------------------------------------------
PREFIX=
IMAGE=
MASK=
MASK_DIL=0
N_CLASS=
NO_GMM_SEED=false
CLASS_LABEL=
PARTIAL_SET=
USE_PARTIAL=false
DIM=3
INITIALIZATION="KMeans"
INIT_OPTS=
CONVERGENCE=[5,0.001]
LIKELIHOOD_MODEL=Gaussian
MRF=[0.1,1x1x1]
USE_RANDOM=1
POSTERIOR_FORM=Socrates[0]
DIR_SAVE=
DIR_SCRATCH=${INC_SCRATCH}/${OPERATOR}_${DATE_SUFFIX}
HELP=false
NO_PNG=false
VERBOSE=false
ANTS_VERBOSE=0
KEEP=false

while true; do
  case "$1" in
    -h | --help) HELP=true ; shift ;;
    -v | --verbose) VERBOSE=true ; shift ;;
    --ants-verbose) ANTS_VERBOSE=1 ; shift ;;
    -k | --keep) KEEP=true ; shift ;;
    -l | --no-log) NO_LOG=true ; shift ;;
    -n | --no-png) NO_PNG=true ; shift ;;
    --prefix) PREFIX="$2" ; shift 2 ;;
    --image) IMAGE="$2" ; shift 2 ;;
    --mask) MASK="$2" ; shift 2 ;;
    --mask-dil) MASK_DIL="$2" ; shift 2 ;;
    --n-class) N_CLASS="$2" ; shift 2 ;;
    --no-gmm-seed) NO_GMM_SEED=true ; shift ;;
    --class-label) CLASS_LABEL="$2" ; shift 2 ;;
    --partial-set) PARTIAL_SET="$2" ; shift 2 ;;
    --use-partial) USE_PARTIAL=true ; shift ;;
    --dimension) DIM="$2" ; shift 2 ;;
    --initialization) INITIALIZATION="$2" ; shift 2 ;;
    --init-opts) INIT_OPTS="$2" ; shift 2 ;;
    --convergence) CONVERGENCE="$2" ; shift 2 ;;
    --likelihood-model) LIKELIHOOD_MODEL="$2" ; shift 2 ;;
    --mrf) MRF="$2" ; shift 2 ;;
    --use-random) USE_RANDOM="$2" ; shift 2 ;;
    --posterior-formulation) POSTERIOR_FORM="$2" ; shift 2 ;;
    --dir-save) DIR_SAVE="$2" ; shift 2 ;;
    --dir-scratch) DIR_SCRATCH="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Usage Help -------------------------------------------------------------------
if [[ "${HELP}" == "true" ]]; then
  echo ''
  echo '------------------------------------------------------------------------'
  echo "Iowa Neuroimage Processing Core: ${FCN_NAME}"
  echo '------------------------------------------------------------------------'
  echo '  -h | --help              display command help'
  echo '  -v | --verbose           add verbose output to log file'
  echo '  -k | --keep              keep preliminary processing steps'
  echo '  -l | --no-log            disable writing to output log'
  echo '  --prefix <value>         scan prefix,'
  echo '                           default: sub-123_ses-1234abcd'
  echo '  --image <value>          image(s) to use for segmentation, multiple'
  echo '                           inputs allowed. T1w first, T2w second, etc.'
  echo '  --mask <value>           binary mask of region to include in'
  echo '                           segmentation'
  echo '  --n-class <value>        number of segmentation classes, default=3'
  echo '  --class-label <values>   array of names for classes, default is'
  echo '                           numeric'
  echo '  --dir-save <value>       directory to save output,'
  echo '                           default" ${RESEARCHER}/${PROJECT}/derivatives/inc/anat/label'
  echo '  --dir-scratch <value>    directory for temporary workspace'
  echo '  --dir-code <value>       directory where INC tools are stored,'
  echo '                           default: ${DIR_INC}'
  echo ''
  NO_LOG=true
  exit 0
fi

# =============================================================================
# Start of Function
# =============================================================================
IMAGE=(${IMAGE//,/ })
NUM_IMAGE=${#IMAGE[@]}

# Set up BIDs compliant variables and workspace --------------------------------
DIR_PROJECT=$(getDir -i ${IMAGE[0]})
PID=$(getField -i ${IMAGE} -f sub)
SID=$(getField -i ${IMAGE} -f ses)
if [[ -z "${PREFIX}" ]]; then
  PREFIX=$(getBidsBase -s -i ${IMAGE[0]})
fi

if [[ -z "${DIR_SAVE}" ]]; then
  DIR_SAVE="${DIR_PROJECT}/derivatives/inc/anat/label/atropos"
fi
mkdir -p ${DIR_SCRATCH}
echo ${DIR_SAVE}
mkdir -p ${DIR_SAVE}

if [[ -z "${CLASS_LABEL}" ]]; then
  CLASS_LABEL=($(seq 1 1 ${N_CLASS}))
else
  CLASS_LABEL=(${CLASS_LABEL//,/ })
fi

# Dilate mask if specified -----------------------------------------------------
MASK_ORIG=
if [[ ${MASK_DIL} -gt 0 ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then
    echo ">>>>>dilating mask by ${MASK_DIL} voxels"
  fi
  ImageMath 3 ${DIR_SCRATCH}/mask_dil.nii.gz MD ${MASK} ${MASK_DIL}
  MASK_ORIG=${MASK}
  MASK=${DIR_SCRATCH}/mask_dil.nii.gz
fi

# Fit Gaussian Mixture model to seed K-Means tissue segmentation ---------------
## Resample images to 1mm isotropic voxels, useful for big images
if [[ "${NO_GMM_SEED}" == "false" ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then
    echo ">>>>>resampling to 1mm isotropic for initialization"
  fi
  ResampleImage 3 ${IMAGE[0]} ${DIR_SCRATCH}/temp.nii.gz 1x1x1 0 0 1
  ResampleImage 3 ${MASK} ${DIR_SCRATCH}/mask.nii.gz 1x1x1 0 0 1
  gunzip ${DIR_SCRATCH}/*.gz

  ## fit a Gaussian mixture model to get initial values for k-means
  if [[ "${VERBOSE}" == "true" ]]; then
    echo ">>>>>estimating k-means seeds with GMM"
  fi
  GMM_FIT=($(Rscript ${INC_R}/histogramPeaksGMM.R \
    ${DIR_SCRATCH}/temp.nii \
    ${DIR_SCRATCH}/mask.nii \
    ${DIR_SCRATCH} \
    "k" ${N_CLASS}))
  GMM_M=
  for (( i=0; i<${N_CLASS}; i++ )); do
    unset TVAL
    TVAL=${GMM_FIT[${i}]}
    TVAL=(${TVAL//,/ })
    GMM_M+=(${TVAL[0]})
  done
  INIT_VALUES=$(echo ${GMM_M[@]})
  INIT_VALUES=${INIT_VALUES// /x}

  if [[ "${VERBOSE}" == "true" ]]; then
    echo -e "\t SEED VALUES:${INIT_VALUES[0]}"
  fi
fi

# run Atropos tissue segmentation ----------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then
  echo ">>>>>generating Atropos function call"
fi

atropos_fcn="Atropos --image-dimensionality ${DIM}"

for (( i=0; i<${NUM_IMAGE}; i++ )); do
  atropos_fcn="${atropos_fcn} --intensity-image ${IMAGE[${i}]}"
done

atropos_fcn="${atropos_fcn} --initialization ${INITIALIZATION}[${N_CLASS}"
if [[ -n "${INIT_OPTS}" ]]; then
  atropos_fcn="${atropos_fcn},${INIT_OPTS}]"
elif [[ "${NO_GMM_SEED}" == "false" ]]; then
  atropos_fcn="${atropos_fcn},${INIT_VALUES[0]}]"
else
  atropos_fcn="${atropos_fcn}]"
fi

if [[ -n ${PARTIAL_SET} ]]; then
  PARTIAL_SET=(${PARTIAL_SET//,/ })
  for (( i=0; i<${#PARTIAL_SET[@]}; i++ )); do
    atropos_fcn="${atropos_fcn} --partial-volume-label-set ${PARTIAL_SET[${i}]}"
  done
fi

if [[ "${USE_PARTIAL}" == "true" ]]; then
  atropos_fcn="${atropos_fcn} --use-partial-volume-likelihoods 1"
fi

atropos_fcn="${atropos_fcn} --posterior-formulation ${POSTERIOR_FORM}"
if [[ -n "${MASK}" ]]; then
  atropos_fcn="${atropos_fcn} --mask-image ${MASK}"
fi
atropos_fcn="${atropos_fcn} --convergence ${CONVERGENCE}"
atropos_fcn="${atropos_fcn} --likelihood-model ${LIKELIHOOD_MODEL}"
atropos_fcn="${atropos_fcn} --mrf ${MRF}"
atropos_fcn="${atropos_fcn} --use-random-seed ${USE_RANDOM}"
atropos_fcn="${atropos_fcn} --verbose ${ANTS_VERBOSE}"
atropos_fcn="${atropos_fcn} -o [${DIR_SCRATCH}/${PREFIX}_label-atropos+${N_CLASS}.nii.gz,${DIR_SCRATCH}/posterior%d.nii.gz]"

if [[ "${VERBOSE}" == "true" ]]; then echo "${atropos_fcn}"; fi

# run Atropos ------------------------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then
  echo ">>>>>run Atropos"
fi
eval ${atropos_fcn}

# apply mask if previously dilated ---------------------------------------------
if [[ ${MASK_DIL} -gt 0 ]]; then
  fslmaths ${DIR_SCRATCH}/${PREFIX}_label-atropos+${N_CLASS}.nii.gz \
    -mas ${MASK_ORIG} \
    ${DIR_SCRATCH}/${PREFIX}_label-atropos+${N_CLASS}.nii.gz
fi

# save output ------------------------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then echo ">>>>>saving results"; fi
mv ${DIR_SCRATCH}/${PREFIX}_label-atropos+${N_CLASS}.nii.gz ${DIR_SAVE}/
for (( i=0; i<${N_CLASS}; i++)); do
  POST_NUM=$((${i}+1))
  mv ${DIR_SCRATCH}/posterior${POST_NUM}.nii.gz \
     ${DIR_SAVE}/${PREFIX}_posterior-${CLASS_LABEL[${i}]}.nii.gz
done

# generate PNG -----------------------------------------------------------------
if [[ "${NO_PNG}" == "false" ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then echo ">>>>>generating PNG"; fi
  make3Dpng --bg ${IMAGE[0]} \
  --fg ${DIR_SAVE}/${PREFIX}_label-atropos+${N_CLASS}.nii.gz \
  --fg-color "timbow" --fg-order "random" --fg-cbar "false" \
  --layout "7:z;7:z;7:z;7:z" --offset "0,0,0" \
  --filename ${PREFIX}_label-atropos+${N_CLASS} \
  --dir-save ${DIR_SAVE}
fi

#===============================================================================
# End of Function
#===============================================================================
exit 0


