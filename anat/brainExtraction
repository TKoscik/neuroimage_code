#!/bin/bash -e
#===============================================================================
# Brain Extraction
# Authors: Timothy R. Koscik, PhD
# Date: 2020-02-27
#===============================================================================
PROC_START=$(date +%Y-%m-%dT%H:%M:%S%z)
FCN_NAME=($(basename "$0"))
DATE_SUFFIX=$(date +%Y%m%dT%H%M%S%N)
OPERATOR=$(whoami)
KERNEL="$(uname -s)"
HARDWARE="$(uname -m)"
HPC_Q=${QUEUE}
HPC_SLOTS=${NSLOTS}
KEEP=false
NO_LOG=false
umask 007

# actions on exit, write to logs, clean scratch
function egress {
  EXIT_CODE=$?
  PROC_STOP=$(date +%Y-%m-%dT%H:%M:%S%z)
  if [[ "${KEEP}" == "false" ]]; then
    if [[ -n ${DIR_SCRATCH} ]]; then
      if [[ -d ${DIR_SCRATCH} ]]; then
        if [[ "$(ls -A ${DIR_SCRATCH})" ]]; then
          rm -R ${DIR_SCRATCH}
        else
          rmdir ${DIR_SCRATCH}
        fi
      fi
    fi
  fi
  if [[ "${NO_LOG}" == "false" ]]; then
    unset LOGSTR
    LOGSTR="${OPERATOR},${DIR_PROJECT},${PID},${SID},${HARDWARE},${KERNEL},${HPC_Q},${HPC_SLOTS},${FCN_NAME},${PROC_START},${PROC_STOP},${EXIT_CODE}"
    writeLog --benchmark --string ${LOGSTR}
  fi
}
trap egress EXIT

# Parse inputs -----------------------------------------------------------------
OPTS=$(getopt -o hvklp --long prefix:,\
image:,method:,suffix:,spatial-filter:,filter-radius:,automask-clip:,\
dir-save:,dir-scratch:,\
help,verbose,keep,no-log -n 'parse-options' -- "$@")
if [[ $? != 0 ]]; then
  echo "Failed parsing options" >&2
  exit 1
fi
eval set -- "$OPTS"

# Set default values for function ---------------------------------------------
PREFIX=
IMAGE=
METHOD=
SUFFIX=
SPATIAL_FILTER=null
FILTER_RADIUS=1
TEMPLATE="OASIS"
AUTOMASK_CLIP=0.5
DIR_SAVE=
DIR_SCRATCH=${INC_SCRATCH}/${OPERATOR}_${DATE_SUFFIX}
HELP=false
VERBOSE=false

while true; do
  case "$1" in
    -h | --help) HELP=true ; shift ;;
    -v | --verbose) VERBOSE=true ; shift ;;
    -k | --keep) KEEP=true ; shift ;;
    -l | --no-log) NO_LOG=true ; shift ;;
    --prefix) PREFIX="$2" ; shift 2 ;;
    --image) IMAGE="$2" ; shift 2 ;;
    --method) METHOD="$2" ; shift 2 ;;
    --suffix) SUFFIX="$2" ; shift 2 ;;
    --spatial-filter) SPATIAL_FILTER="$2" ; shift 2 ;;
    --filter-radius) FILTER_RADIUS="$2" ; shift 2 ;;
    --automask-clip) AUTOMASK_CLIP="$2" ; shift 2 ;;
    --template) TEMPLATE="$2" ; shift 2 ;;
    --dir-save) DIR_SAVE="$2" ; shift 2 ;;
    --dir-scratch) DIR_SCRATCH="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Usage Help -------------------------------------------------------------------
if [[ "${HELP}" == "true" ]]; then
  echo ''
  echo '------------------------------------------------------------------------'
  echo "Iowa Neuroimage Processing Core: ${FCN_NAME}"
  echo '------------------------------------------------------------------------'
  echo '  -h | --help              display command help'
  echo '  -v | --verbose           add verbose output to log file'
  echo '  -k | --keep              keep preliminary processing steps'
  echo '  -l | --no-log            disable writing to output log'
  echo '  --prefix <value>         scan prefix,'
  echo '                           default: sub-123_ses-1234abcd'
  echo '  --image <value>          Images to use for brain extraction, multiple'
  echo '                           images allowed, T1w should be first input'
  echo '  --method <value>         One of AFNI, ANTs, FSL, multiple inputs'
  echo '                           allowed.  If multiple inputs given, a'
  echo '                           majority vote output will be given as well'
  echo '  --suffix <value>         an optional suffix to append to filenames,'
  echo '                           e.g., "0" or "prelim"'
  echo '  --spatial-filter <value> Add a spatial filter step after extracting'
  echo '                           brain mask using ImageMath, e.g., MD for'
  echo '                           dilation, filter radius must be specified'
  echo '                           as well. Options are: G, MD, ME, MO, MC,'
  echo '                           GD, GE, GO, GC)'
  echo '  --filter-radius <value>  Filter radius in voxels (unless filter is'
  echo '                           G for Gaussian then mm)'
  echo '  --template <value>       For ANTs method, which template to use,'
  echo '                           default=OASIS'
  echo '  --dir-save <value>       directory to save output, '
  echo '  --dir-scratch <value>    directory for temporary workspace'
  echo ''
  NO_LOG=true
  exit 0
fi

#===============================================================================
# Start of Function
#===============================================================================
IMAGE=(${IMAGE//,/ })

# Set up BIDs compliant variables and workspace --------------------------------
DIR_PROJECT=$(getDir -i ${IMAGE[0]})
PID=$(getField -i ${IMAGE[0]} -f sub)
SID=$(getField -i ${IMAGE[0]} -f ses)
DIRPID=sub-${PID}
if [[ -n ${SID} ]]; then DIRPID="${DIRPID}/ses-${SID}"; fi
if [[ -z "${PREFIX}" ]]; then PREFIX=$(getBidsBase -s -i ${IMAGE[0]}); fi
if [[ -z "${DIR_SAVE}" ]]; then DIR_SAVE=${DIR_PROJECT}/derivatives/inc/prep/${DIRPID}/anat; fi
mkdir -p ${DIR_SCRATCH}
mkdir -p ${DIR_SAVE}

# Brain extraction ------------------------------------------------------------
# run AFNI 3dSkullStrip -----------------------------------------------------
if [[ "${METHOD,,}" == *"skullstrip"* ]] \
|| [[ "${METHOD,,}" == *"afni"* ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then echo ">>>Running AFNI 3dSkullstrip"; fi
  3dSkullStrip \
    -input ${IMAGE[0]} \
    -prefix ${DIR_SCRATCH}/${PREFIX}_mask-brain+AFNI${SUFFIX}.nii.gz
  fslmaths ${DIR_SCRATCH}/${PREFIX}_mask-brain+AFNI${SUFFIX}.nii.gz \
    -bin ${DIR_SCRATCH}/${PREFIX}_mask-brain+AFNI${SUFFIX}.nii.gz
  MASK_LS+=(${PREFIX}_mask-brain+AFNI${SUFFIX}.nii.gz)
fi

# run AFNI 3dAutomask -----------------------------------------------------
if [[ "${METHOD,,}" == *"automask"* ]] \
|| [[ "${METHOD,,}" == *"afni"* ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then echo ">>>Running AFNI 3dAutomask"; fi
  3dAutomask \
    -prefix ${DIR_SCRATCH}/${PREFIX}_mask-brain+AUTO${SUFFIX}.nii.gz \
    -clfrac ${AUTOMASK_CLIP} -q \
    ${IMAGE[0]}
  CopyImageHeaderInformation ${IMAGE[0]} \
    ${DIR_SCRATCH}/${PREFIX}_mask-brain+AUTO${SUFFIX}.nii.gz \
    ${DIR_SCRATCH}/${PREFIX}_mask-brain+AUTO${SUFFIX}.nii.gz 1 1 1
  MASK_LS+=(${PREFIX}_mask-brain+AUTO${SUFFIX}.nii.gz)
fi

# run ANTs brain extraction -------------------------------------------------
if [[ "${METHOD,,}" == *"ants"* ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then echo ">>>Running ANTs Brain Extraction"; fi
  DIR_TEMPLATE=${INC_TEMPLATE}/${TEMPLATE}
  ants_fcn="antsBrainExtraction.sh"
  ants_fcn="${ants_fcn} -d 3"
  for (( j=0; j<${#IMAGE[@]}; j++ )); do
    ants_fcn="${ants_fcn} -a ${IMAGE[${j}]}"
  done
  ants_fcn="${ants_fcn} -e ${DIR_TEMPLATE}/T_template0.nii.gz"
  ants_fcn="${ants_fcn} -m ${DIR_TEMPLATE}/T_template0_BrainCerebellumProbabilityMask.nii.gz"
  ants_fcn="${ants_fcn} -f ${DIR_TEMPLATE}/T_template0_BrainCerebellumRegistrationMask.nii.gz"
  ants_fcn="${ants_fcn} -o ${DIR_SCRATCH}/ants-bex_"
  eval ${ants_fcn}
  CopyImageHeaderInformation ${IMAGE[${j}]} \
    ${DIR_SCRATCH}/ants-bex_BrainExtractionMask.nii.gz \
    ${DIR_SCRATCH}/ants-bex_BrainExtractionMask.nii.gz 1 1 1
  mv ${DIR_SCRATCH}/ants-bex_BrainExtractionMask.nii.gz \
    ${DIR_SCRATCH}/${PREFIX}_mask-brain+ANTs${SUFFIX}.nii.gz
  rm ${DIR_SCRATCH}/ants-bex_BrainExtraction*
  MASK_LS+=(${PREFIX}_mask-brain+ANTs${SUFFIX}.nii.gz)
fi

# run FSL's BET -------------------------------------------------------------
if [[ "${METHOD,,}" == *"fsl"* ]] || [[ "${METHOD,,}" == *"bet"* ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then echo ">>>Running FSL's BET"; fi
  fsl_fcn="bet ${IMAGE[0]}"
  fsl_fcn="${fsl_fcn} ${DIR_SCRATCH}/fsl_bet.nii.gz"
  if [[ ${#IMAGE[@]} -gt 1 ]]; then
    fsl_fcn="${fsl_fcn} -A2 ${IMAGE[0]}"
  fi
  fsl_fcn="${fsl_fcn} -m -R"
  eval ${fsl_fcn}
  mv ${DIR_SCRATCH}/fsl_bet_mask.nii.gz ${DIR_SCRATCH}/${PREFIX}_mask-brain+FSL${SUFFIX}.nii.gz
  MASK_LS+=(${PREFIX}_mask-brain+FSL${SUFFIX}.nii.gz)
  rm ${DIR_SCRATCH}/fsl*
fi

# SAMSEG labelling for brain mask ----------------------------------------------
if [[ "${METHOD,,}" == *"fsurf"* ]] \
|| [[ "${METHOD,,}" == *"freesurfer"* ]] \
|| [[ "${METHOD,,}" == *"samseg"* ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then echo ">>>Running Freesurfer's SAMSEG"; fi
  mkdir -p ${DIR_SCRATCH}/samseg
  samseg_fcn="run_samseg --input"
  for (( j=0; j<${#IMAGE[@]}; j++ )); do
    mri_convert ${IMAGE[${j}]} ${DIR_SCRATCH}/image${j}.mgz
    samseg_fcn="${samseg_fcn} ${DIR_SCRATCH}/image${j}.mgz"
  done
  samseg_fcn="${samseg_fcn} --output ${DIR_SCRATCH}/samseg"
  eval ${samseg_fcn}
  mri_extract_label ${DIR_SCRATCH}/samseg/seg.mgz \
    0 4 24 43 165 258 259 ${DIR_SCRATCH}/samseg/nonbrain.mgz
  mri_convert ${DIR_SCRATCH}/samseg/nonbrain.mgz ${DIR_SCRATCH}/samseg/nonbrain.nii.gz
  mri_convert ${DIR_SCRATCH}/samseg/seg.mgz ${DIR_SCRATCH}/samseg/brain.nii.gz
  fslmaths ${DIR_SCRATCH}/samseg/nonbrain.nii.gz \
    -binv ${DIR_SCRATCH}/samseg/nonbrain.nii.gz
  fslmaths ${DIR_SCRATCH}/samseg/brain.nii.gz \
    -bin -mas ${DIR_SCRATCH}/samseg/nonbrain.nii.gz \
    ${DIR_SCRATCH}/${PREFIX}_mask-brain+SAMSEG${SUFFIX}.nii.gz
  MASK_LS+=(${PREFIX}_mask-brain+SAMSEG${SUFFIX}.nii.gz)
fi

if [[ "${SPATIAL_FILTER,,}" != "null" ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then echo ">>>>>>applying Spatial Filter ${SPATIAL_FILTER} ${FILTER_RADIUS}"; fi
  for (( i=0; i<${#MASK_LS[@]}; i++ )); do
    sf_fcn="ImageMath 3 ${DIR_SCRATCH}/${MASK_LS[@]}"
    sf_fcn="${sf_fcn} ${SPATIAL_FILTER}"
    sf_fcn="${sf_fcn} ${DIR_SCRATCH}/${MASK_LS[@]}"
    sf_fcn="${sf_fcn} ${FILTER_RADIUS}"
    eval ${sf_fcn}
  done
fi

# do majority vote mask if multiple used ---------------------------------------
METHOD=(${METHOD//,/ })
if [[ ${#METHOD[@]} > 1 ]]; then
  for (( i=0; i<${#MASK_LS[@]}; i++ )); do
    TLS="${TLS},${DIR_SCRATCH}/${MASK_LS[${i}]}"
  done

  ## make Venn mask labelling overlapping regions in labels
  if [[ "${VERBOSE}" == "true" ]]; then echo ">>>Running making Venn-like overlap of masks"; fi
  maskVenn --mask-ls ${TLS} --label "brain+VENN${SUFFIX}" --prefix ${PREFIX} --dir-save ${DIR_SCRATCH}
  MASK_LS+=(${PREFIX}_mask-brain+VENN${SUFFIX}.nii.gz)

  ## make MAJORITY VOTE for brain mask
  if [[ "${VERBOSE}" == "true" ]]; then echo ">>>Running majority vote of masks"; fi
  ImageMath 3 ${DIR_SCRATCH}/${PREFIX}_mask-brain+MALF${SUFFIX}.nii.gz MajorityVoting ${TLS//,/ }
  MASK_LS+=(${PREFIX}_mask-brain+MALF${SUFFIX}.nii.gz)
fi

# move files to appropriate locations-------------------------------------------
mv ${DIR_SCRATCH}/*_mask-brain* ${DIR_SAVE}/

#===============================================================================
# End of Function
#===============================================================================
exit 0


