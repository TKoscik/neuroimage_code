#!/bin/bash -e
#===============================================================================
# Generate T2star map by estimating R2* from non-linear fit to multi-echo data
# Authors: Timothy Koscik PhD, Lauren Hopkins PhD
# Date: 2021-06-09
# CHANGELOG: 2021-09-08 - debug add in work_dir specifier to @compute_OC_weights
#                       - added feature to read TE times from JSON files
#                       - added option to coregister, specify registration type
#                       - added PNGs for output
#            2021-09-09 - added options for rigid, affine, or syn coregistration
#                       - added application of normalization transforms
#===============================================================================
PROC_START=$(date +%Y-%m-%dT%H:%M:%S%z)
FCN_NAME=($(basename "$0"))
DATE_SUFFIX=$(date +%Y%m%dT%H%M%S%N)
OPERATOR=$(whoami)
KERNEL="$(uname -s)"
HARDWARE="$(uname -m)"
HPC_Q=${QUEUE}
HPC_SLOTS=${NSLOTS}
KEEP=false
NO_LOG=false
umask 007

# actions on exit, write to logs, clean scratch
function egress {
  EXIT_CODE=$?
  PROC_STOP=$(date +%Y-%m-%dT%H:%M:%S%z)
  if [[ "${KEEP}" == "false" ]]; then
    if [[ -n ${DIR_SCRATCH} ]]; then
      if [[ -d ${DIR_SCRATCH} ]]; then
        if [[ "$(ls -A ${DIR_SCRATCH})" ]]; then
          rm -R ${DIR_SCRATCH}
        else
          rmdir ${DIR_SCRATCH}
        fi
      fi
    fi
  fi
  if [[ "${NO_LOG}" == "false" ]]; then
    unset LOGSTR
    LOGSTR="${OPERATOR},${DIR_PROJECT},${PID},${SID},${HARDWARE},${KERNEL},${HPC_Q},${HPC_SLOTS},${FCN_NAME},${PROC_START},${PROC_STOP},${EXIT_CODE}"
    writeLog --benchmark --string ${LOGSTR}
  fi
}
trap egress EXIT

# Parse inputs -----------------------------------------------------------------
OPTS=$(getopt -o hvn --long prefix:,image:,te:,no-median-filter,filter-size:,\
coreg-rigid,coreg-affine,coreg-syn,coreg-ref:,coreg-from:,coreg-to:,coreg-verbose,\
norm,norm-xfm:,norm-ref:,template:,space:,\
dir-save:,dir-xfm:,dir-scratch:,\
help,no-log,no-png,verbose -n 'parse-options' -- "$@")
if [ $? != 0 ]; then
  echo "Failed parsing options" >&2
  exit 1
fi
eval set -- "$OPTS"

# Set default values for function ---------------------------------------------
PREFIX=
IMAGE=
TE=
MEDIAN_FILTER=true
FILTER_SIZE=3
COREG_RIGID=false
COREG_AFFINE=false
COREG_SYN=false
COREG_REF=
COREG_FROM=raw
COREG_TO=native
COREG_VERBOSE=false
NORM=
NORM_XFM=
NORM_REF=
TEMPLATE=HCPICBM
SPACE=1mm
DIR_SAVE=
DIR_XFM=
DIR_SCRATCH=${INC_SCRATCH}/${OPERATOR}_${DATE_SUFFIX}
HELP=false
VERBOSE=false
NO_PNG=false

while true; do
  case "$1" in
    -h | --help) HELP=true ; shift ;;
    -l | --no-log) NO_LOG=true ; shift ;;
    -n | --no-png) NO_PNG=true ; shift ;;
    -v | --verbose) VERBOSE=true ; shift ;;
    --prefix) PREFIX="$2" ; shift 2 ;;
    --image) IMAGE="$2" ; shift 2 ;;
    --te) TE="$2" ; shift 2 ;;
    --no-median-filter) MEDIAN_FILTER="false" ; shift ;;
    --filter-size) FILTER_SIZE="$2" ; shift 2 ;;
    --coreg-rigid) COREG_RIGID=true ; shift ;;
    --coreg-affine) COREG_AFFINE=true ; shift ;;
    --coreg-syn) COREG_SYN=true ; shift ;;
    --coreg-ref) COREG_REF="$2" ; shift 2 ;;
    --coreg-from) COREG_FROM="$2" ; shift 2 ;;
    --coreg-to) COREG_TO="$2" ; shift 2 ;;
    --coreg-verbose) COREG_VERBOSE=true ; shift ;;
    --norm) NORM=true ; shift ;;
    --norm-xfm) NORM_XFM="$2" ; shift 2 ;;
    --norm-ref) NORM_REF="$2" ; shift 2 ;;
    --template) TEMPLATE="$2" ; shift 2 ;;
    --space) SPACE="$2" ; shift 2 ;;
    --dir-save) DIR_SAVE="$2" ; shift 2 ;;
    --dir-xfm) DIR_XFM="$2" ; shift 2 ;;
    --dir-scratch) DIR_SCRATCH="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Usage Help -------------------------------------------------------------------
if [[ "${HELP}" == "true" ]]; then
  echo ''
  echo '------------------------------------------------------------------------'
  echo "Iowa Neuroimage Processing Core: ${FCN_NAME}"
  echo '------------------------------------------------------------------------'
  echo '  -h | --help              display command help'
  echo '  -l | --no-log            disable writing to output log'
  echo '  -n | --no-png            disable PNG output'
  echo '  -v | --verbose           add verbose output to terminal'
  echo '  --prefix                 prefix for filename'
  echo '  --image                  list of images, can include * to find matches'
  echo '                           must be comma-separated, not bash array'
  echo '  --te                     comma-separted list of echo times in ms'
  echo '  --coreg                  name of coregistration recipe, e.g., "rigid"'
  echo '  --ref-image              fixed image for coregistration, default is'
  echo '         ${DIR_PROJECT}/derivatives/inc/anat/native/${PREFIX}_T1w.nii.gz'
  echo '  --from                   string for fixed registration label,'
  echo '                             e.g., raw'
  echo '  --to                     string for moving registration label,'
  echo '                             e.g., native'
  echo '  --dir-save               location to save output'
  echo '  --dir-scratch            location for temporary files'
  echo ''
  NO_LOG=true
  exit 0
fi

#===============================================================================
# Start of Function
#===============================================================================
# gather T2star images ---------------------------------------------------------
unset IMG_LS
unset IMG
IMG=(${IMAGE//,/ })
for (( i=0; i<${#IMG[@]}; i++ )); do
  IMG_LS+=($(ls ${IMG[${i}]}))
done
N=${#IMG_LS[@]}

# get TE values from JSON files ------------------------------------------------
if [[ -z ${TE} ]]; then
  TE=
  for (( i=0; i<${N}; i++ )); do
    unset TMP
    TMP=($(jq -r '.EchoTime' < ${IMG_LS[${i}]%%.*}.json | tr -d ' [],"'))
    TE[${i}]=$(ezMath -x "${TMP}*1000" -d 3)
  done
else
  TE=(${TE//,/ })
fi

# if verbose, print out input --------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then
  echo "[INC:${FCN_NAME}]"
  echo -e "  T2star input images:"
  for (( i=0; i<${N}; i++ )); do echo -e "    ${IMG_LS[${i}]}"; done
  echo -e "  Echo Times:  ${TE[@]}"
fi

# Set up BIDs compliant variables and workspace --------------------------------
DIR_PROJECT=$(getDir -i ${IMG_LS[0]})
PID=$(getField -i ${IMG_LS[0]} -f sub)
SID=$(getField -i ${IMG_LS[0]} -f ses)
PIDSTR=sub-${PID}
DIRPID=sub-${PID}
if [[ -n ${SID} ]]; then
  PIDSTR=${PIDSTR}_ses-${SID}
  DIRPID=${DIRPID}/ses-${SID}
fi
if [[ -z ${PREFIX} ]]; then PREFIX=${PIDSTR}; fi
if [[ -z ${DIR_SAVE} ]]; then
  DIR_SAVE=${DIR_PROJECT}/derivatives/inc/anat/T2star
fi
mkdir -p ${DIR_SAVE}
mkdir -p ${DIR_SCRATCH}

# median filter (if specified) -------------------------------------------------
if [[ "${MEDIAN_FILTER}" == "true" ]]; then 
  if [[ "${VERBOSE}" == "true" ]]; then echo -e ">>>APPLYING MEDIAN FILTER"; fi
  for (( i=0; i<${N}; i++ )); do
    fslmaths ${IMG_LS[${i}]} -kernel boxv ${FILTER_SIZE} -fmedian \
      ${DIR_SCRATCH}/${PREFIX}_echo-${i}_T2star.nii.gz
    IMG_LS[${i}]=${DIR_SCRATCH}/${PREFIX}_echo-${i}_T2star.nii.gz
  done
  if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tDONE"; fi
fi
  

# fit echoes, calculate weights ------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then echo -e ">>>COMPUTING WEIGHTS"; fi
fit_str="@compute_OC_weights"
fit_str="${fit_str} -echo_times \""
for (( i=0; i<${N}; i++ )); do
  fit_str="${fit_str} ${TE[${i}]}"
done
fit_str="${fit_str}\" -echo_dsets"
for (( i=0; i<${N}; i++ )); do
  fit_str="${fit_str} ${IMG_LS[${i}]}"
done
fit_str="${fit_str} -prefix ${DIR_SCRATCH}/weights"
fit_str="${fit_str} -work_dir ${DIR_SCRATCH}/work_dir"
if [[ "${VERBOSE}" == "true" ]]; then echo ${fit_str}; fi
eval ${fit_str}
if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tDONE"; fi

# convert BRIK to NIFTI --------------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then echo -e ">>>CONVERT BRIK TO NIFTI"; fi
3dAFNItoNIFTI -prefix ${DIR_SCRATCH}/${PREFIX}_T2star.nii.gz \
  ${DIR_SCRATCH}/work_dir/s5.t2.star+orig
if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tDONE"; fi

# mask out background noise from calculation -----------------------------------
if [[ "${VERBOSE}" == "true" ]]; then echo -e ">>>REMOVE BG NOISE VIA AUTOMASK"; fi
3dAutomask -prefix ${DIR_SCRATCH}/mask-fg.nii.gz -clfrac 0.1 -q ${IMG_LS[0]}
fslmaths ${DIR_SCRATCH}/${PREFIX}_T2star.nii.gz \
  -mas ${DIR_SCRATCH}/mask-fg.nii.gz \
  ${DIR_SCRATCH}/${PREFIX}_T2star.nii.gz
if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tDONE"; fi

# coregistration (if specified) ------------------------------------------------
if [[ "${NORM}" == "true" ]] \
&& [[ "${COREG_SYN}" == "false" ]] \
&& [[ "${COREG_AFFINE}" == "false" ]] \
&& [[ "${COREG_RIGID}" == "false" ]]; then
  COREG_RIGID=true
fi
if [[ "${COREG_RIGID}" == "true" ]] \
|| [[ "${COREG_AFFINE}" == "true" ]] \
|| [[ "${COREG_SYN}" == "true" ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then echo -ne ">>>COREGISTERING T2STAR MAP"; fi
  if [[ -z ${DIR_XFM} ]]; then
    DIR_XFM=${DIR_PROJECT}/derivatives/inc/xfm/${DIRPID}
  fi
  if [[ -z ${COREG_REF} ]]; then
    COREG_REF=${DIR_PROJECT}/derivatives/inc/anat/native/${PIDSTR}_T1w.nii.gz
  fi
  if [[ "${COREG_SYN}" == "true" ]]; then
    COREG_RECIPE=syn
  elif [[ "${COREG_AFFINE}" == "true" ]]; then
    COREG_RECIPE=affine
  else
    COREG_RECIPE=rigid
  fi
  coreg_fcn="coregistrationChef --no-png"
  coreg_fcn="${coreg_fcn} --recipe-name ${COREG_RECIPE}"
  coreg_fcn="${coreg_fcn} --fixed ${COREG_REF}"
  coreg_fcn="${coreg_fcn} --label-to ${COREG_TO}"
  coreg_fcn="${coreg_fcn} --moving ${DIR_SCRATCH}/${PREFIX}_T2star.nii.gz"
  coreg_fcn="${coreg_fcn} --label-from ${COREG_FROM}"
  coreg_fcn="${coreg_fcn} --dir-save ${DIR_SCRATCH}"
  coreg_fcn="${coreg_fcn} --dir-xfm ${DIR_XFM}"
  if [[ "${VERBOSE}" == "true" ]]; then coreg_fcn="${coreg_fcn} --verbose"; fi
  if [[ "${COREG_VERBOSE}" == "true" ]]; then coreg_fcn="${coreg_fcn} --ants-verbose"; fi
  eval ${coreg_fcn}
  rename "reg-${COREG_RECIPE}+${COREG_TO}_" "" ${DIR_SCRATCH}/*.nii.gz
  if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tDONE"; fi
  if [[ "${NO_PNG}" == "false" ]]; then
    if [[ "${VERBOSE}" == "true" ]]; then echo -ne ">>>GENERATE COREG PNG"; fi
    make3Dpng \
    --bg ${COREG_REF} \
      --bg-color "#000000,#00FF00,#FFFFFF" \
      --bg-thresh "10,99" \
    --fg ${DIR_SCRATCH}/${PREFIX}_T2star.nii.gz \
      --fg-thresh "10,99" \
      --fg-color "#000000,#FF00FF,#FFFFFF" \
      --fg-alpha 50 \
      --fg-cbar \
    --layout "6:x;6:x;6:x;6:y;6:y;6:y;6:z;6:z;6:z" \
    --offset "0,0,0" \
    --filename ${PIDSTR}_mod-T2star_reg-${COREG_TO}_xfm-${COREG_RECIPE} \
    --dir-save ${DIR_XFM}
    if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tDONE"; fi
  fi
fi

# Normalize (if specified) -----------------------------------------------------
if [[ "${NORM}" == "true" ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then echo -e ">>>APPLYING NORMALIZATION XFMS"; fi
  if [[ -z ${NORM_XFM} ]]; then
    NORM_XFM[0]=${DIR_XFM}/${PIDSTR}_from-T1w+rigid_to-${TEMPLATE}+${SPACE}_xfm-syn.nii.gz
    NORM_XFM[1]=${DIR_XFM}/${PIDSTR}_from-T1w+rigid_to-${TEMPLATE}+${SPACE}_xfm-affine.mat
  else
    NORM_XFM=(${NORM_XFM//,/ })
  fi
  if [[ "${COREG_RECIPE}" == "syn" ]]; then
    NORM_XFM+=(${DIR_XFM}/${PIDSTR}_mod-T2star_reg-${COREG_TO}_xfm-syn.nii.gz)
  fi
  if [[ "${COREG_RECIPE}" == "affine" ]]; then
    NORM_XFM+=(${DIR_XFM}/${PIDSTR}_mod-T2star_reg-${COREG_TO}_xfm-affine.mat)
  fi
  if [[ "${COREG_RECIPE}" == "syn" ]]; then
    NORM_XFM+=(${DIR_XFM}/${PIDSTR}_mod-T2star_reg-${COREG_TO}_xfm-rigid.mat)
  fi
  if [[ -z ${NORM_REF} ]]; then
    NORM_REF=${INC_TEMPLATE}/${TEMPLATE}/${SPACE}/${TEMPLATE}_${SPACE}_T1w.nii.gz
  fi
  norm_fcn="antsApplyTransforms -d 3 -n Linear"
  norm_fcn="${norm_fcn} -i ${DIR_SCRATCH}/${PREFIX}_T2star.nii.gz"
  norm_fcn="${norm_fcn} -o ${DIR_SCRATCH}/${PIDSTR}_reg-${TEMPLATE}+${SPACE}_T2star.nii.gz"
  for (( i=0; i<${#NORM_XFM[@]}; i++ )); do
    norm_fcn="${norm_fcn} -t ${NORM_XFM[${i}]}"
  done
  norm_fcn="${norm_fcn} -r ${NORM_REF}"
  if [[ "${VERBOSE}" == "true" ]]; then echo ${norm_fcn}; fi
  eval ${norm_fcn}
  if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tDONE"; fi
fi

# move out to save location ----------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then echo -ne ">>>SAVING OUTPUT"; fi
if [[ "${COREG_RIGID}" == "true" ]] \
|| [[ "${COREG_AFFINE}" == "true" ]] \
|| [[ "${COREG_SYN}" == "true" ]]; then
  mv ${DIR_SCRATCH}/${PREFIX}_T2star.nii.gz \
    ${DIR_SAVE}/${PREFIX}_reg-${COREG_TO}_T2star.nii.gz
else  
  mv ${DIR_SCRATCH}/${PREFIX}_T2star.nii.gz \
    ${DIR_SAVE}/${PREFIX}_T2star.nii.gz
fi
if [[ "${NORM}" == "true" ]]; then
  mv ${DIR_SCRATCH}/${PIDSTR}_reg-${TEMPLATE}+${SPACE}_T2star.nii.gz \
    ${DIR_SAVE}/
fi
if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tDONE"; fi

# generate png -----------------------------------------------------------------
if [[ "${NO_PNG}" == "false" ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then echo -ne ">>>GENERATING PNG"; fi
  if [[ "${COREG_RIGID}" == "true" ]] \
  || [[ "${COREG_AFFINE}" == "true" ]] \
  || [[ "${COREG_SYN}" == "true" ]]; then
    make3Dpng --bg ${COREG_REF} \
      --fg ${DIR_SAVE}/${PREFIX}_reg-${COREG_TO}_T2star.nii.gz \
      --fg-color "cubehelix" --fg-alpha 50 --fg-cbar \
      --filename ${PIDSTR}_reg-${COREG_TO}_T2star \
      --dir-save ${DIR_SAVE}
  else
    make3Dpng --bg ${DIR_SAVE}/${PREFIX}_T2star.nii.gz --bg-color "cubehelix"
  fi
  if [[ "${NORM}" == "true" ]]; then
    make3Dpng --bg ${NORM_REF} \
      --fg ${DIR_SAVE}/${PIDSTR}_reg-${TEMPLATE}+${SPACE}_T2star.nii.gz \
      --fg-color "cubehelix" --fg-alpha 50 --fg-cbar \
      --filename ${PIDSTR}_reg-${TEMPLATE}+${SPACE}_T2star \
      --dir-save ${DIR_SAVE}
  fi
  if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tDONE"; fi
fi

#===============================================================================
# End of Function
#===============================================================================
exit 0

