#!/bin/bash -e
#===============================================================================
# Generate T2star map by estimating R2* from non-linear fit to multi-echo data
# Authors: Timothy Koscik PhD, Lauren Hopkins PhD
# Date: 2021-06-09
# CHANGELOG: <description of major changes to functionality>
#===============================================================================
PROC_START=$(date +%Y-%m-%dT%H:%M:%S%z)
FCN_NAME=($(basename "$0"))
DATE_SUFFIX=$(date +%Y%m%dT%H%M%S%N)
OPERATOR=$(whoami)
KERNEL="$(uname -s)"
HARDWARE="$(uname -m)"
HPC_Q=${QUEUE}
HPC_SLOTS=${NSLOTS}
KEEP=false
NO_LOG=false
umask 007

# actions on exit, write to logs, clean scratch
function egress {
  EXIT_CODE=$?
  PROC_STOP=$(date +%Y-%m-%dT%H:%M:%S%z)
  if [[ "${KEEP}" == "false" ]]; then
    if [[ -n ${DIR_SCRATCH} ]]; then
      if [[ -d ${DIR_SCRATCH} ]]; then
        if [[ "$(ls -A ${DIR_SCRATCH})" ]]; then
          rm -R ${DIR_SCRATCH}
        else
          rmdir ${DIR_SCRATCH}
        fi
      fi
    fi
  fi
  if [[ "${NO_LOG}" == "false" ]]; then
    unset LOGSTR
    LOGSTR="${OPERATOR},${DIR_PROJECT},${PID},${SID},${HARDWARE},${KERNEL},${HPC_Q},${HPC_SLOTS},${FCN_NAME},${PROC_START},${PROC_STOP},${EXIT_CODE}"
    writeLog --benchmark --string ${LOGSTR}
  fi
}
trap egress EXIT

# Parse inputs -----------------------------------------------------------------
OPTS=$(getopt -o hvn --long prefix:,image:,te:,dir-save:,dir-scratch:,\
help,no-log,no-png,verbose -n 'parse-options' -- "$@")
if [ $? != 0 ]; then
  echo "Failed parsing options" >&2
  exit 1
fi
eval set -- "$OPTS"

# Set default values for function ---------------------------------------------
PREFIX=
IMAGE=
TE=
DIR_SAVE=
DIR_SCRATCH=${INC_SCRATCH}/${OPERATOR}_${DATE_SUFFIX}
HELP=false
VERBOSE=false

while true; do
  case "$1" in
    -h | --help) HELP=true ; shift ;;
    -l | --no-log) NO_LOG=true ; shift ;;
    -n | --no-png) NO_PNG=true ; shift ;;
    -v | --verbose) VERBOSE=true ; shift ;;
    --prefix) PREFIX="$2" ; shift 2 ;;
    --image) IMAGE="$2" ; shift 2 ;;
    --te) TE="$2" ; shift 2 ;;
    --dir-save) DIR_SAVE="$2" ; shift 2 ;;
    --dir-scratch) DIR_SCRATCH="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Usage Help -------------------------------------------------------------------
if [[ "${HELP}" == "true" ]]; then
  echo ''
  echo '------------------------------------------------------------------------'
  echo "Iowa Neuroimage Processing Core: ${FCN_NAME}"
  echo '------------------------------------------------------------------------'
  echo '  -h | --help              display command help'
  echo '  -l | --no-log            disable writing to output log'
  echo '  --prefix  <optional>     prefix for filename'
  echo '  --image                  list of images, can include * to find matches'
  echo '                           must be comma-separated, not bash array'
  echo '  --te                     comma-separted list of echo times in ms'
  echo '  --dir-save               location to save output'
  echo '  --dir-scratch            location for temporary files'
  echo ''
  NO_LOG=true
  exit 0
fi

#===============================================================================
# Start of Function
#===============================================================================
# gather T2star images ---------------------------------------------------------
unset IMG_LS
unset IMG
IMG=(${IMAGE//,/ })
for (( i=0; i<${#IMG[@]}; i++ )); do
  IMG_LS+=($(ls ${IMG[${i}]}))
done
N=${#IMG_LS[@]}

# get TE values from JSON files ------------------------------------------------
if [[ -z ${TE} ]]; then
  for (( i=0; i<${N}; i++ )); do
    unset TMP
    TMP=($(jq -r '.EchoTime' < ${IMG[${i}]%%.*}.json | tr -d ' [],"'))
    TE+=($(ezMath -x "${TMP}*1000" -d 3))
  done
else
  TE=(${TE//,/ })
fi

# if verbose, print out input --------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then
  echo "[INC:${FCN_NAME}]"
  echo -e "\tT2star input images:
  for (( i=0; i<${N}; i++ )); do echo -e "\t\t${IMG_LS[${i}]}"; done
  echo -e "\tEcho Times:
  for (( i=0; i<${N}; i++ )); do echo -e "\t\t${TE[${i}]}"; done
fi

# Set up BIDs compliant variables and workspace --------------------------------
DIR_PROJECT=$(getDir -i ${IMG_LS[0]})
PID=$(getField -i ${IMG_LS[0]} -f sub)
SID=$(getField -i ${IMG_LS[0]} -f ses)
PIDSTR=sub-${PID}
DIRPID=sub-${PID}
if [[ -n ${SID} ]]; then
  PIDSTR=${PIDSTR}_ses-${SID}
  DIRPID=${DIRPID}/ses-${SID}
fi
if [[ -z ${PREFIX} ]]; then PREFIX=${PIDSTR}; fi
if [[ -z ${DIR_SAVE} ]]; then
  DIR_SAVE=${DIR_PROJECT}/derivatives/inc/prep/${DIRPID}/anat
fi
mkdir -p ${DIR_SAVE}
mkdir -p ${DIR_SCRATCH}

# fit echoes, calculate weights ------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then echo -ne ">>>COMPUTING WEIGHTS"; fi
fit_str="@compute_OC_weights"
fit_str="${fit_str} -echo_times \""
for (( i=0; i<${N}; i++ )); do fit_str="${fit_str} ${TE[${i}]}"; done
fit_str="${fit_str}\" -echo_dsets"
for (( i=0; i<${N}; i++ )); do fit_str="${fit_str} ${IMG_LS[${i}]}"; done
fit_str="${fit_str} -prefix ${DIR_SCRATCH}/weights"
eval ${fit_str}
if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tDONE"; fi

# weight echoes ----------------------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then echo -ne ">>>WEIGHTING ECHOES"; fi
wt_str="3dMean"
wt_str="${wt_str} -weightset ${DIR_SCRATCH}/weights+orig"
wt_str="${wt_str} -prefix ${DIR_SCRATCH}/t2star.nii.gz"
for (( i=0; i<${N}; i++ )); do wt_str="${wt_str} ${IMG_LS[${i}]}"; done
eval ${wt_str}
if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tDONE"; fi

# move out to save location ----------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then echo -ne ">>>SAVING OUTPUT"; fi
mv ${DIR_SCRATCH}/t2star.nii.gz ${DIR_SAVE}/${PREFIX}_T2star.nii.gz
if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tDONE"; fi

# generate png -----------------------------------------------------------------
if [[ "${NO_PNG}" == "false" ]]; then
  if [[ "${VERBOSE}" == "true" ]]; then echo -ne ">>>GENERATING PNG"; fi
  make3Dpng --bg ${DIR_SAVE}/${PREFIX}_T2star.nii.gz --bg-color "cubehelix"  
  if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tDONE"; fi
fi

#===============================================================================
# End of Function
#===============================================================================
exit 0

