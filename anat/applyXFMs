#!/bin/bash -e
#===============================================================================
# Apply transforms
# Authors: Timothy R. Koscik
# Date: 2021-03-12
# CHANGELOG: <description of major changes to functionality>
#===============================================================================
PROC_START=$(date +%Y-%m-%dT%H:%M:%S%z)
FCN_NAME=($(basename "$0"))
DATE_SUFFIX=$(date +%Y%m%dT%H%M%S%N)
OPERATOR=$(whoami)
KERNEL="$(uname -s)"
HARDWARE="$(uname -m)"
HPC_Q=${QUEUE}
HPC_SLOTS=${NSLOTS}
KEEP=false
NO_LOG=false
umask 007

# actions on exit, write to logs, clean scratch
function egress {
  EXIT_CODE=$?
  PROC_STOP=$(date +%Y-%m-%dT%H:%M:%S%z)
  if [[ "${NO_LOG}" == "false" ]]; then
    unset LOGSTR
    LOGSTR="${OPERATOR},${DIR_PROJECT},${PID},${SID},${HARDWARE},${KERNEL},${HPC_Q},${HPC_SLOTS},${FCN_NAME},${PROC_START},${PROC_STOP},${EXIT_CODE}"
    writeLog --benchmark --string ${LOGSTR}
  fi
}
trap egress EXIT

# Parse inputs -----------------------------------------------------------------
OPTS=$(getopt -o hvl --long image:,xfm:,interpolation:,ref-image:,label-to:,\
prefix:,filename:,dir-save:,\
help,verbose,no-log -n 'parse-options' -- "$@")
if [ $? != 0 ]; then
  echo "Failed parsing options" >&2
  exit 1
fi
eval set -- "$OPTS"

# Set default values for function ---------------------------------------------
PREFIX=
IMAGE=
XFM=
INTERPOLATION=
REF_IMAGE=
LABEL_TO=
FILENAME=
DIR_SAVE=
HELP=false
VERBOSE=false

while true; do
  case "$1" in
    -h | --help) HELP=true ; shift ;;
    -l | --no-log) NO_LOG=true ; shift ;;
    -v | --verbose) VERBOSE=true ; shift ;;
    --prefix) PREFIX="$2" ; shift 2 ;;
    --image) IMAGE="$2" ; shift 2 ;;
    --xfm) XFM="$2" ; shift 2 ;;
    --interpolation) INTERPOLATION="$2" ; shift 2 ;;
    --ref-image) REF_IMAGE="$2" ; shift 2 ;;
    --label-to) LABEL_TO="$2" ; shift 2 ;;
    --filename) FILENAME="$2" ; shift 2 ;;
    --dir-save) DIR_SAVE="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Usage Help -------------------------------------------------------------------
if [[ "${HELP}" == "true" ]]; then
  echo ''
  echo '------------------------------------------------------------------------'
  echo "Iowa Neuroimage Processing Core: ${FCN_NAME}"
  echo '------------------------------------------------------------------------'
  echo '  -h | --help              display command help'
  echo '  -l | --no-log            disable writing to output log'
  echo '  --prefix  <optional>     filename, without extension to use for file'
  echo '  --dir-save               location to save output'
  echo ''
  NO_LOG=true
  exit 0
fi

#===============================================================================
# Start of Function
#===============================================================================
IMAGE=(${IMAGE//;/ })
XFM=(${XFM//;/ })
INTERPOLATION=(${INTERPOLATION//;/ })
FILENAME=(${FILENAME//;/ })
if [[ -z ${LABEL_TO} ]]; then TO=$(getSpace -i ${REF_IMAGE}); fi
DIR_SAVE=(${DIR_SAVE//;/ })

# Set up BIDs compliant variables and workspace --------------------------------
DIR_PROJECT=$(getDir -i ${IMAGE[0]})
PID=$(getField -i ${IMAGE[0]} -f sub)
SID=$(getField -i ${IMAGE[0]} -f ses)
PIDSTR=sub-${PID}
DIRPID=sub-${PID}
if [[ -n ${SID} ]]; then
  PIDSTR="${PIDSTR}_ses-${SID}"
  DIRPID="${DIRPID}/ses-${SID}"
fi
if [[ -z ${DIR_SAVE} ]]; then DIR_SAVE=${DIR_PROJECT}/derivatives/inc/prep/${DIRPID}; fi
mkdir -p ${DIR_SAVE}

# apply transforms to all input images -----------------------------------------
for (( i=0; i<${#IMAGE[@]}; i++ )); do
  unset apply_xfm NVOL MOD
  NVOL=$(niiInfo -i ${IMAGE[${i}]} -f volumes)
  if [[ -z ${FILENAME} ]]; then
    if [[ -z ${PREFIX} ]]; then
      PREFIX=$(getBidsBase -s -i ${IMAGE[${i}]})
    fi
    MOD=$(getField -i ${IMAGE[${i}]} -f modality)
    OUTPUT=${DIR_SAVE[${i}]}/${PREFIX}_reg-${TO}_${MOD}.nii.gz
  else
    OUTPUT=${DIR_SAVE[${i}]}/${FILENAME[${i}]}.nii.gz
  fi
    
  apply_xfm="antsApplyTransforms -d 3"
  if [[ ${NVOL} -gt 1 ]]; then apply_xfm="${apply_xfm} -e 3"; fi
  if [[ -n ${INTERPOLATION} ]]; then
    if [[ "${IMAGE[${i}]}" == *"mask"* ]]; then
      apply_xfm="${apply_xfm} -n GenericLabel"
    elif [[ "${IMAGE[${i}]}" == *"label"* ]]; then
      apply_xfm="${apply_xfm} -n MultiLabel"
    else
      apply_xfm="${apply_xfm} -n BSpline[3]"
    fi
  fi
  apply_xfm="${apply_xfm} -i ${IMAGE[${i}]}"
  apply_xfm="${apply_xfm} -o ${OUTPUT}"
  for (( j=0; j<${#XFM[@]}; j++ )); do
    apply_xfm="${apply_xfm} -t ${XFM[${j}]}"
  done
  apply_xfm="${apply_xfm} -r ${REF_IMAGE}"
  
  if [[ "${VERBOSE}" == "true" ]]; then
    echo "IMAGE ${i}:"
    echo ${apply_xfm}
  fi
  eval ${apply_xfm}
done

#===============================================================================
# End of Function
#===============================================================================
exit 0


