#!/bin/bash -e
#===============================================================================
# Deconvolution
# Authors: Lauren Hopkins
# Date: 2021-03-10
# CHANGELOG:
# - Need LSA/LSS method options (needs to go to 3dLSS, and I don't see it,
#   perhaps thats been deprecated in AFNI?). should default to LSA (no extra
#   3dLSS).
# - need -x1d output for 3dLSS
# - Can we simplify inputs to default saving what is need for LSS, set toggles appropriately
# - for multi-run tasks need function to merge time series and onset files appropriately?
# - stim-times-im does not appear to be implemented, but is necessary?
# - is using stim-times compatable with stim-times-im (and 3dLSS which can use only 1)
#   - maybe break into separate functions? deconvolve and deconvolveSTBs
#===============================================================================
PROC_START=$(date +%Y-%m-%dT%H:%M:%S%z)
FCN_NAME=($(basename "$0"))
DATE_SUFFIX=$(date +%Y%m%dT%H%M%S%N)
OPERATOR=$(whoami)
KERNEL="$(unname -s)"
HARDWARE="$(uname -m)"
HPC_Q=${QUEUE}
HPC_SLOTS=${NSLOTS}
KEEP=false
NO_LOG=false
umask 007

actions on exit, write to logs, clean scratch
function egress {
  EXIT_CODE=$?
  PROC_STOP=$(date +%Y-%m-%dT%H:%M:%S%z)
  if [[ "${KEEP}" == "false" ]]; then
    if [[ -n ${DIR_SCRATCH} ]]; then
      if [[ -d ${DIR_SCRATCH} ]]; then
        if [[ "$(ls -A ${DIR_SCRATCH})" ]]; then
          rm -R ${DIR_SCRATCH}
        else
          rmdir ${DIR_SCRATCH}
        fi
      fi
    fi
  fi
  if [[ "${NO_LOG}" == "false" ]]; then
    unset LOGSTR
    LOGSTR="${OPERATOR},${DIR_PROJECT},${PID},${SID},${HARDWARE},${KERNEL},${HPC_Q},${HPC_SLOTS},${FCN_NAME},${PROC_START},${PROC_STOP},${EXIT_CODE}"
    writeLog --benchmark --string ${LOGSTR}
  fi
}
trap egress EXIT

# Parse inputs -----------------------------------------------------------------
OPTS=$(getopt -o hvkln --long prefix:,\
image:,mask:,polort:,goforit:,\
stim_times:,fsl_stims:,ortvec,rmodel:,stim_times_im,x1d_stop,\
fitts:,errts:,fout:,rout:,tout:,bucket:,iresp:,jobs,automask,\
convert_fsl,\
dir-save:,dir-scratch:,\
help,verbose,keep,no-log -n 'parse-options' -- "$@")
if [ $? != 0 ]; then
  echo "Failed parsing options" >&2
  exit 1
fi
eval set -- "$OPTS"

# Set default values for function ---------------------------------------------
PREFIX=
IMAGE=
MASK=
AUTOMASK=false
POLORT=A
GOFORIT=0
STIM_TIMES=
ORTVEC=
RMODEL=
STIM_TIMES_IM=true
FSL_STIMS=true
CONVERT_FSL=false
X1D_STOP=false
FITTS=true
ERRTS=true
FOUT=true
ROUT=true
TOUT=true
BUCKET=true
IRESP=false
JOBS=1
DIR_SAVE=
DIR_SCRATCH=${INC_SCRATCH}/${OPERATOR}_${DATE_SUFFIX}
HELP=false
VERBOSE=0
KEEP=false


## QUESTION FOR TIM - the way I have it setup now, fitts and errts get created automatically
## as do various stat outputs (TOUT, ROUT, FOUT, BUCKET).
## I have a FITTS variable (and the rest) defaulting to `true` so I can do either:
# 1) Set FITTS default to false
# 2) Make the flag NOFITTS for if they don't want it.
# 3) Have them use the flag with a boolean (e.g. --fitts false)
## Which do you prefer?
while true; do
  case "$1" in
    -h | --help) HELP=true ; shift ;;
    -v | --verbose) VERBOSE=1 ; shift ;;
    -k | --keep) KEEP=true ; shift ;;
    -l | --no-log) NO_LOG=true ; shift ;;
    --prefix) PREFIX="$2" ; shift 2 ;;
    --image) IMAGE="$2" ; shift 2 ;;
    --mask) MASK="$2" ; shift 2 ;;
    --polort) POLORT="$2" ; shift 2 ;;
    --goforit) GOFORIT="$2" ; shift 2 ;;
    --stim_times) STIM_TIMES="$2" ; shift 2 ;;
    --ortvec) ORTVEC="$2" ; shift 2 ;;
    --rmodel) RMODEL="$2" ; shift 2 ;;
    --stim_times_im) STIM_TIMES_IM="$2" ; shift 2 ;;
    --fsl_stims) FSL_STIMS=true ; shift ;;
    --convert_fsl) CONVERT_FSL=true ; shift ;;
    --fitts) FITTS="$2" ; shift ;;
    --errts) ERRTS="$2" ; shift ;;
    --fout) FOUT="$2" ; shift ;;
    --rout) ROUT="$2" ; shift ;;
    --tour) TOUT="$2" ; shift ;;
    --bucket) BUCKET="$2" ; shift ;;
    --jobs) JOBS="$2" ; shift ;;
    --x1d_stop) X1D_STOP=true ; shift ;;
    --automask) AUTOMASK=true ; shift ;;
    --dir-save) DIR_SAVE="$2" ; shift 2 ;;
    --dir-scratch) DIR_SCRATCH="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Usage Help -------------------------------------------------------------------
if [[ "${HELP}" == "true" ]]; then
  echo ''
  echo '------------------------------------------------------------------------'
  echo "Iowa Neuroimage Processing Core: ${FCN_NAME}"
  echo '------------------------------------------------------------------------'
  echo "Usage: ${FCN_NAME}"
  echo '  -h | --help              display command help'
  echo '  -v | --verbose           add verbose output to log file'
  echo '  -k | --keep              keep preliminary processing steps'
  echo '  -l | --no-log            disable writing to output log'
  echo '  --prefix <value>         scan prefix,'
  echo '                           default: sub-123_ses-1234abcd'
  echo '  --image                  list of images, can include * to find matches'
  echo '                           must be comma-separated, not bash array'
  echo '  --mask <value>           Optional. Mask corresponding to ts_bold'
  echo '  --polort <value>         Degree of polynomial corresponding to the'
  echo '                           baseline model. Value must be numeric and'
  echo '                           greater than 0. If you dont know what this'
  echo '                           means, use the default;'
  echo '                           default: A (automatic)'
  echo '  --goforit <value>        Optional. Use if you are worried about'
  echo '                           colinearity or problems in your design matrix'
  echo '                           that will cause 3dDeconvolution to not run.'
  echo '                           Value must be numeric and greater than 0.'
  echo '  --ortvec <value>         Comma separated list of regressors of no'
  echo '                           interest to be regressed from the data'
  echo '  --stim_times <value>     Comma separated list of stimulus timing'
  echo '                           files. Can be in .txt or .1D format'
  echo '  --stim_times_im          Each stimulus time specified in the variable'
  echo '                           `stim_times` will output an individual regressor'
  echo '  --fsl_stims              Are stimulus timing files in FSL 3-column format'
  echo '                           default: true'
  echo '  --convert_fsl            Convert fsl timing files to afni. Good if want any models '
  echo '                           other than dmBLOCK which youm probably will eventually'
  echo '                           default: false'
  echo '  --rmodel <value>         Comma separated list of ?????????????????????'
  echo '  --jobs <value>           Make that CPU go vroom-vroom'
  echo '                           Value must be numeric, greater than 0 and less'
  echo '                           than or equal to your number of CPUs.'
  echo '                           default: 1'
  echo '  --automask               Will automatically mask input data.'
  echo '                           If a mask is also provided, it will default to that mask.'
  echo '  --fitts                  Output full model time series fit for 4D data'
  echo '  --errts                  Output residual error for full model fit of 4D data'
  echo '  --fout                   Output f statistics for each stimulus'
  echo '  --rout                   Output r^2 statistics for each stimulus'
  echo '  --tout                   Output t statistics for each stimulus'
  echo '  --bucket                 Output single file with various parameters'
  echo '                           including full model stats and IRF coefficents'
  echo '  --iresp                  Output impulse response fx for each stimulus'
  echo '  --dir-save <value>       directory to save output, default varies by'
  echo '                           function'
  echo '  --dir-scratch <value>    directory for temporary workspace'
  echo ''
  NO_LOG=true
  exit 0
fi

#===============================================================================
# Start of Function
#===============================================================================
# gather func images ---------------------------------------------------------
unset IMG_LS
unset IMG
IMG=(${IMAGE//,/ })
for (( i=0; i<${#IMG[@]}; i++ )); do
  IMG_LS+=($(ls ${IMG[${i}]}))
done
N=${#IMG_LS[@]}

# if verbose, print out input --------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then
  echo "[INC:${FCN_NAME}]"
  echo -e "  BOLD input images:"
  for (( i=0; i<${N}; i++ )); do echo -e "    ${IMG_LS[${i}]}"; done
fi


# Set up BIDs compliant variables and workspace --------------------------------
DIR_PROJECT=$(getDir -i ${IMG_LS[0]})
PID=$(getField -i ${IMG_LS[0]} -f sub)
SID=$(getField -i ${IMG_LS[0]} -f ses)
PIDSTR=sub-${PID}
DIRPID=sub-${PID}
if [[ -n ${SID} ]]; then
  PIDSTR=${PIDSTR}_ses-${SID}
  DIRPID=${DIRPID}/ses-${SID}
fi
if [[ -z ${PREFIX} ]]; then PREFIX=${PIDSTR}; fi
if [[ -z ${DIR_SAVE} ]]; then
  DIR_SAVE=${DIR_PROJECT}/derivatives/inc/func/deconvolution
fi
mkdir -p ${DIR_SAVE}
mkdir -p ${DIR_SCRATCH}

if [[ ! -f "${IMAGE}" ]]; then
  echo "The BOLD file does not exist. aborting."
  exit 1
fi

# partial out stim times ------------------------------------------------------
STIMULI=(${STIM_TIMES//,/ })
N_STIM=${#STIMULI[@]}

# partial out stimulus models -------------------------------------------------
RMODELS=(${RMODEL//,/ })
N_MODEL=${#RMODELS[@]}


BOLD_TS=$IMG_LS

# stim names from file names
for (( i=0; i<${N_STIM}; i++ )); do
  if [[ ${i} == 0 ]]; then
    FILE_TMP="${STIMULI[${i}]##*/}"
    FILE_NAME="${FILE_TMP%.*}"
  else
    FILE_TMP="${STIMULI[${i}]##*/}"
    FILE_NAME="${FILE_NAME}, ${FILE_TMP%.*}"
  fi
done
STIM_NAMES=(${FILE_NAME//,/ })

# convert fsl 3 columnn stim timing format to afni format ---------------------
unset AFNI_FILES
if [[ "${CONVERT_FSL}" == "true" ]]; then
  for (( i=0; i<${N_STIM}; i++ )); do
    timing_tool.py -fsl_timing_files ${STIMULI[${i}]} \
      -write_timing ${DIR_SCRATCH}/${STIM_NAMES[${i}]}_afni_timing.txt
    if [[ ${i} == 0 ]]; then
      AFNI_FILES="${DIR_SCRATCH}/${STIM_NAMES[${i}]}_afni_timing.txt"
    else
      AFNI_FILES="${AFNI_FILES}, ${DIR_SCRATCH}/${STIM_NAMES[${i}]}_afni_timing.txt"
    fi
  done
fi


# let's do that decon
# for if stim input is in fsl 3 column format - default
unset decon_fcn

decon_fcn="3dDeconvolution"
decon_fcn="${decon_fcn} -input ${BOLD_TS}"
decon_fcn="${decon_fcn} -polort ${POLORT}"
decon_fcn="${decon_fcn} -num_stimts ${N_STIM}"
if [[ "${FSL_STIMS}" == "true" ]]; then
  for (( i=0; i<${N_STIM}; i++ )); do
    STIM_NUM=`expr $i + 1`
    decon_fcn="${decon_fcn} -stim_times_FSL ${STIM_NUM} ${STIMULI[${i}]} 'dmUBLOCK(1)' -stim_label ${STIM_NAMES[${i}]}"
  done
elif [[ "${CONVERT_FSL}" == "true" ]]; then
    STIM_NUM=`expr $i + 1`
    decon_fcn="${decon_fcn} -stim_times ${STIM_NUM} ${AFNI_FILES[${I}]} 'BLOCK(2,1)' -stim_label ${STIM_NAMES[${i}]}"
  fi
fi
decon_fcn="${decon_fcn} -jobs ${JOBS}"


# are there ortvecs?
if [[ -z "$ORTVEC" ]]; then
  echo "------------------------------------------------------"
  echo "------Are you sure you have nuisance variables?-------"
  echo "------------------------------------------------------"
else
  ORTS=(${ORTVEC//,/ })
  N_ORT=${#ORTS[@]}

  for (( i=0; i<${N_ORT}; i++ )); do
    if [[ ${i} == 0 ]]; then
      ORTLS="${ORTS[${i}]##*/}"
    else
      ORTLS="${ORTLS}, ${ORTS[${i}]##*/}"
    fi
  done
  ORT_LABEL=(${FILE_NAME//,/ })

  for (( i=0; i<${N_ORT}; i++ )); do
    ORT_NUM=`expr $i + 1`
    decon_fcn="${decon_fcn} -ortvec ${ORTS[${i}]} ortvec_${ORT_NUM} ${ORT_LABEL}"
  done
fi

# stim_times_IM
if [[ "${STIM_TIMES_IM}" == "true" ]]; then
  for (( i=0; i<${N_STIM}; i++ )); do
    IM_NUM=`expr $i + 1`
    decon_fcn="${decon_fcn} -stim_times_IM ${IM_NUM} ${STIMULI[${i}]} 'dmUBLOCK(1)'"
  done
fi

# x1D_stop
if [[ "${X1D_STOP}" == "true" ]]; then
  decon_fcn="${decon_fcn} -x1D_stop"
fi

# mask options
if [[ -f "${MASK}" ]]; then
  decon_fcn="${decon_fcn} -mask ${MASK}"
elif [[ "${AUTOMASK}" == "true" ]]; then
  decon_fcn="${decon_fcn} -automask"
elif [[ -n "${MASK}" ]] && [[ ! -e "${MASK}" ]]; then
  echo "Mask ${MASK} does not exist."
  echo "Either get the right filename or"
  echo "try -automask if you want (will take longer)."
fi
if [[ ${GOFORIT} -gt 0 ]]; then
  decon_fcn="${decon_fcn} -GOFORIT ${GOFORIT}"
fi

#################### HARDCODED FOR SCA ####################
############# UNTIL I FIGURE OUT A BETTER WAY #############
##################### TO SPECIFY GLTS #####################
#decon_fcn="${decon_fcn} -gltsym"

# output stat options
# F-stat
if [[ "${FOUT}" == "true" ]]; then
  decon_fcn="${decon_fcn} -fout"
fi
# T-stats
if [[ "${TOUT}" == "true" ]]; then
  decon_fcn="${decon_fcn} -tout"
fi
# R^2
if [[ "${ROUT}" == "true" ]]; then
  decon_fcn="${decon_fcn} -rout"
fi
# errts (error)
if [[ "${ERRTS}" == "true" ]]; then
  decon_fcn="${decon_fcn} -errts ${DIR_SCRATCH}/${PREFIX}_errts.nii.gz"
fi
# bucket stat output (i.e. all)
if [[ "${BUCKET}" == "true" ]]; then
  decon_fcn="${decon_fcn} -bucket ${DIR_SCRATCH}/${PREFIX}_bucket.nii.gz"
fi

# iresp output
# IMPORTANT NOTE: YOU CANT USE -IRESP WITH DMBLOCK WHICH MEANS PROBABLY CANT USE IT WITH
# FSL TIMING FILES
if [[ "${IRESP}" == "true" ]] && [[ "${CONVERT_FSL}" == "true" ]]; then
  for (( i=0; i<${N_STIM}; i++ )); do
    RESP_NUM=`expr $i + 1`
    decon_fcn="${decon_fcn} -iresp ${RESP_NUM} ${DIR_SCRATCH}/${STIM_NAMES[${i}]}_iresp.nii.gz"
  done
elif [[ "${IRESP}" == "true" ]] && [[ "${CONVERT_FSL}" == "false" ]]; then
  echo "--------------------------------------"
  echo "Can't get iresp from dmBLOCK function"
  echo "If you want iresp, convert your fsl timing"
  echo "files to afni format"
  echo "--------------------------------------"
fi



# move files over
if [[ "${IRESP}" == "true" ]]; then
  for (( i=0; i<${N_STIM}; i++ )); do
    mv ${DIR_SCRATCH}/${STIM_NAMES[${i}]}_iresp.nii.gz ${DIR_SAVE}/${STIM_NAMES[${i}]}_iresp.nii.gz
  done
fi
mv ${DIR_SCRATCH}/${PREFIX}_errts.nii.gz ${DIR_SAVE}/${PREFIX}_errts.nii.gz
mv ${DIR_SCRATCH}/${PREFIX}_bucket.nii.gz ${DIR_SAVE}/${PREFIX}_bucket.nii.gz

#===============================================================================
# End of Function
#===============================================================================
exit 0

