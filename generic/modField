#!/bin/bash -e
#===============================================================================
# change flags in BIDS filename
# compliant with BIDs 1.2.2, and includes INPC-specific extensions
# Authors: Timothy R. Koscik, PhD
# Date: 2020-03-09
#===============================================================================

# Parse inputs -----------------------------------------------------------------
OPTS=$(getopt -o hmarsi:f:v: --long input:,modify,add,remove,\
no-sort,sort-list:,field:,value:,help -n 'parse-options' -- "$@")
if [[ $? != 0 ]]; then
  echo "Failed parsing options" >&2
  exit 1
fi
eval set -- "$OPTS"

# Set default values for function ---------------------------------------------
INPUT=
FIELD=
VALUE_NEW=
ACTION=
NO_SORT=false
SORT_LS="sub,ses,task,acq,ce,rec,dir,run,mod,echo,recording,proc,site,mask,label,from,to,reg,prep,resid,xfm"
HELP=false

while true; do
  case "$1" in
    -h | --help) HELP=true ; shift ;;
    -i | --input) INPUT="$2" ; shift 2 ;;
    -m | --modify) ACTION=modify ; shift ;;
    -a | --add) ACTION=add ; shift ;;
    -r | --remove) ACTION=remove ; shift ;;
    -s | --no-sort) NO_SORT=true ; shift ;;
    --sort-list) SORT_LIST="$2" ; shift 2 ;;
    -f | --field) FIELD="$2" ; shift 2 ;;
    -v | --value) VALUE_NEW="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Usage Help -------------------------------------------------------------------
if [[ "${HELP}" == "true" ]]; then
  echo ''
  echo '------------------------------------------------------------------------'
  echo "Iowa Neuroimage Processing Core: ${FCN_NAME}"
  echo '------------------------------------------------------------------------'
  echo '  -h | --help              display command help'
  echo '  -i | --input <value>     BIDs compliant filepath'
  echo '  -m | --modify            modify an existing flag'
  echo '  -a | --add               add an additional flag'
  echo '  -r | --remove            remove an existing flag'
  echo '  -s | --sort              toggle to disable sorting of flags'
  echo '  --sort-list 		   comma separated sorting list for flag order,'
  echo '                           defaults to BIDS preferred'
  echo '                           order with INC additions:'
  echo '                             sub,ses,task,acq,ce,rec,dir,run,mod,echo,'
  echo '                             recording,proc,site,mask,label,from,to,'
  echo '                             reg,prep,resid,xfm'
  echo '  -f | --field <value>     field to act on'
  echo '  -v | --value <value>     value to use'
  echo '  field options (in order):'
  echo '    sub, ses, task, acq, ce, rec, dir, run, mod*, echo, recording, proc,'
  echo '    site, mask, label, from, to, reg, prep, resid, xfm'
  echo '    modality [image modality at end of filename]'
  echo '    [*mod refers to "mod" as a flag, not the mdality without a flag at'
  echo '     the end of the filename]'
  echo '    -novel field will be appended before modality'
  echo ''
  exit 0
fi

#==============================================================================
# Start of function
#==============================================================================
# extract directory, filename, and extension ----------------------------------
DIR_NAME=$(dirname ${INPUT})
if [[ "${DIR_NAME}" == "." ]]; then DIR_NAME="null"; fi
BNAME=$(basename ${INPUT})
FNAME="${BNAME%%.*}"
EXT="${BNAME#*.}"
if [[ "${BNAME}" == "${EXT}" ]]; then EXT="null"; fi

# extract flags and values ----------------------------------------------------
SPLIT_UNDERSCORE=(${FNAME//_/ })
for (( i=0; i<${#SPLIT_UNDERSCORE[@]}; i++ )); do
  unset SPLIT_DASH
  SPLIT_DASH=(${SPLIT_UNDERSCORE[${i}]//-/ })
  if [[ ${#SPLIT_DASH[@]} -eq 2 ]]; then
    FLAG+=(${SPLIT_DASH[0]})
    VALUE+=(${SPLIT_DASH[1]})
  else
    FLAG+=(modality)
    VALUE+=(${SPLIT_DASH[0]})
  fi
done
NFLAG=${#FLAG[@]}

# loop over possible flags, modify, add, or remove-----------------------------
## modify flag ----------------------------------------------------------------
if [[ "${ACTION,,}" == "modify" ]]; then
  for (( i=0; i<${NFLAG}; i++ )); do
    if [[ "${FLAG[${i}],,}" == "${FIELD,,}" ]]; then
      VALUE[${i}]="${VALUE_NEW}"
    fi
  done
fi

## remove flag ----------------------------------------------------------------
if [[ "${ACTION,,}" == "remove" ]]; then
  for (( i=0; i<${NFLAG}; i++ )); do
    if [[ "${FLAG[${i}]}" == "${FIELD,,}" ]]; then
      FLAG[${i}]="remove"
      VALUE[${i}]="remove"
    fi
  done
fi

## Add flag -------------------------------------------------------------------
### will append to flag if it already exists
FLAG_EXISTS=false
if [[ "${ACTION,,}" == "add" ]]; then
  for (( i=0; i<${NFLAG}; i++ )); do
    if [[ "${FLAG[${i}],,}" == "${FIELD,,}" ]]; then
      VALUE[${i}]="${VALUE[${i}]}+${VALUE_NEW}"
      FLAG_EXISTS=true
    fi
  done
  if [[ "${FLAG_EXISTS}" == "false" ]]; then
    FLAG+=(${FIELD,,})
    VALUE+=(${VALUE_NEW})
  fi
fi

## sort flags -----------------------------------------------------------------
if [[ "${NO_SORT}" == "false" ]]; then
  SORT_LS=(${SORT_LS//,/ })
  ORDER=
  COUNT=0
  for (( j=0; j<${#SORT_LS[@]}; j++ )); do
    for (( i=0; i<${#FLAG[@]}; i++ )); do
      if [[ "${FLAG[${i}]}" == "${SORT_LS[${j}]}" ]]; then
        COUNT=$(ezMath -x "${COUNT} + 1" -d 0)
        ORDER[${i}]=${COUNT}
      fi
    done
  done
  MAX=0
  for n in "${ORDER[@]}" ; do
    ((n > MAX)) && MAX=$n
  done
  for (( i=0; i<${#FLAG[@]}; i++ )); do
    if [[ -z ${ORDER[${i}]} ]]; then
      MAX=$(ezMath -x "${MAX} + 1" -d 0)
      ORDER[${i}]=${MAX}
    fi
  done
else
  ORDER=($(seq 0 ${#FLAG[@]} 1))
fi

# write output string ---------------------------------------------------------
OUT_STR=
if [[ "${DIR_NAME}" != "null" ]]; then OUT_STR="${DIR_NAME}/"; fi
for (( i=0; i<=${#FLAG[@]}; i++ )); do
  for (( j=0; j<${#FLAG[@]}; j++ )); do
    if [[ ${ORDER[${j}]} -eq ${i} ]]; then
      if [[ "${FLAG[${j}]}" != "remove" ]]; then
        if [[ "${FLAG[${j}]}" != "modality" ]]; then
          TSTR="${FLAG[${j}]}-${VALUE[${j}]}"
        else
          TSTR="${VALUE[${j}]}"
        fi
        OUT_STR="${OUT_STR}${TSTR}_"
      fi
    fi
  done
done
OUT_STR=${OUT_STR%_}
if [[ "${EXT}" != "null" ]]; then OUT_STR="${OUT_STR}.${EXT}"; fi

# send output to terminal -----------------------------------------------------
echo ${OUT_STR}

#==============================================================================
# End of function
#==============================================================================
exit 0


