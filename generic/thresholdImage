#!/bin/bash -e
#===============================================================================
# Threshold image
# Authors: Timothy Koscik, PhD
# Date: 2021-05-26
# CHANGELOG: <description of major changes to functionality>
#===============================================================================
PROC_START=$(date +%Y-%m-%dT%H:%M:%S%z)
FCN_NAME=($(basename "$0"))
DATE_SUFFIX=$(date +%Y%m%dT%H%M%S%N)
OPERATOR=$(whoami)
KERNEL="$(uname -s)"
HARDWARE="$(uname -m)"
HPC_Q=${QUEUE}
HPC_SLOTS=${NSLOTS}
NO_LOG=false
umask 007

# actions on exit, write to logs, clean scratch
function egress {
  EXIT_CODE=$?
  PROC_STOP=$(date +%Y-%m-%dT%H:%M:%S%z)
  if [[ "${KEEP}" == "false" ]]; then
    if [[ -n ${DIR_SCRATCH} ]]; then
      if [[ -d ${DIR_SCRATCH} ]]; then
        if [[ "$(ls -A ${DIR_SCRATCH})" ]]; then
          rm -R ${DIR_SCRATCH}
        else
          rmdir ${DIR_SCRATCH}
        fi
      fi
    fi
  fi
  if [[ "${NO_LOG}" == "false" ]]; then
    logBenchmark --operator ${OPERATOR} \
    --hardware ${HARDWARE} --kernel ${KERNEL} --hpc-q ${HPC_Q} --hpc-slots ${HPC_SLOTS} \
    --fcn-name ${FCN_NAME} --proc-start ${PROC_START} --proc-stop ${PROC_STOP} --exit-code ${EXIT_CODE}
  fi
}
trap egress EXIT

# Parse inputs -----------------------------------------------------------------
OPTS=$(getopt -o hli:v:p: --long input:,volume:,prefix:,lt:,le:,eq:,ge:,gt:,ne:,bin,\
dir-scratch:,help,no-log -n 'parse-options' -- "$@")
if [ $? != 0 ]; then
  echo "Failed parsing options" >&2
  exit 1
fi
eval set -- "$OPTS"

# Set default values for function ---------------------------------------------
INPUT=
VOLUME="all"
PREFIX=
LT=
LE=
EQ=
NE=
GE=
GT=
BIN="false"
DIR_SCRATCH=${INC_SCRATCH}/${OPERATOR}_${DATE_SUFFIX}
HELP=false

while true; do
  case "$1" in
    -h | --help) HELP=true ; shift ;;
    -l | --no-log) NO_LOG=true ; shift ;;
    -i | --input) INPUT="$2" ; shift 2 ;;
    -v | --volume) VOLUME="$2" ; shift 2 ;;
    -p | --prefix) PREFIX="$2" ; shift 2 ;;
    --lt) LT="$2" ; shift 2 ;;
    --le) LE="$2" ; shift 2 ;;
    --eq) EQ="$2" ; shift 2 ;;
    --ne) NE="$2" ; shift 2 ;;
    --ge) GE="$2" ; shift 2 ;;
    --gt) GT="$2" ; shift 2 ;;
    --bin) BIN=true ; shift ;;
    --dir-scratch) DIR_SCRATCH="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Usage Help -------------------------------------------------------------------
if [[ "${HELP}" == "true" ]]; then
  echo ''
  echo '------------------------------------------------------------------------'
  echo "Iowa Neuroimage Processing Core: ${FCN_NAME}"
  echo '------------------------------------------------------------------------'
  echo '  -h | --help                display command help'
  echo '  -l | --no-log              disable writing to output log'
  echo '  --input <filename>         NIFTI volume to threshold'
  echo '  --volume <volume numbers>  which volumes in input to threshold'
  echo '                             e.g., 1,3:5,8 = 1,3,4,5,8'
  echo '  --output <optional>        full file name and path for output'
  echo '  --lt <value>               threshold less than value'
  echo '  --le <value>               threshold less than or equal to value'
  echo '  --eq <value>               threshold equal to value'
  echo '  --ne <value>               threshold not equal to value'
  echo '  --ge <value>               threshold greater than or equal to value'
  echo '  --gt <value>               threshold greater than value'
  echo '  --bin                      toggle to save mask of thresholded regions'
  echo '  --dir-scratch              location for temporary files'
  echo ''
  NO_LOG=true
  exit 0
fi

#===============================================================================
# Start of Function
#===============================================================================
if [[ -z ${PREFIX} ]]; then
  DIR_SAVE=$(dirname ${INPUT})
  FBASE=$(basename ${INPUT})
  FNAME=${FBASE%%.*}
  OUTPRE="${DIR_SAVE}/${FNAME}"
  OUTSUF=
  if [[ -n ${LT} ]]; then OUTSUF="${OUTSUF}_lt-${LT}"; fi
  if [[ -n ${LE} ]]; then OUTSUF="${OUTSUF}_le-${LE}"; fi
  if [[ -n ${EQ} ]]; then OUTSUF="${OUTSUF}_eq-${EQ}"; fi
  if [[ -n ${NE} ]]; then OUTSUF="${OUTSUF}_ne-${NE}"; fi
  if [[ -n ${GE} ]]; then OUTSUF="${OUTSUF}_ge-${GE}"; fi
  if [[ -n ${GT} ]]; then OUTSUF="${OUTSUF}_gt-${GT}"; fi
  OUTSUF=${OUTSUF//0.0/00}
fi
mkdir -p ${DIR_SCRATCH}

# split volumes ----------------------------------------------------------------
unset VOLSTR
if [[ "${VOLUME}" == "all" ]]; then
  fslsplit ${INPUT} ${DIR_SCRATCH}/input_ -t
  VOLSTR="vol-all"
else
  VOL=(${VOLUME//,/ })
  VCOUNT=0
  for (( i=0; i<${#VOL[@]}; i++ )); do
    if [[ "${VOL[${i}]}" == *":"* ]]; then
      TMP=(${VOL[${i}]//:/ })
      START=$((${TMP[0]} - 1))
      STOP=$((${TMP[1]} - 1))
      for j in $(seq ${START} 1 ${STOP}); do
        TSTR=$((${j} + 1))
        if [[ -n ${VOLSTR} ]]; then
          VOLSTR="${VOLSTR}+${TSTR}"
        else
          VOLSTR="vol-${TSTR}"
        fi
        VCOUNT=$((${VCOUNT} + 1))
        fslroi ${INPUT} ${DIR_SCRATCH}/input_${VCOUNT}.nii.gz ${j} 1
      done
    else
      if [[ -n ${VOLSTR} ]]; then
        VOLSTR="${VOLSTR}+${VOL[${i}]}"
      else
        VOLSTR="vol-${VOL[${i}]}"
      fi
      VCOUNT=$((${VCOUNT} + 1))
      START=$((${VOL[${i}]} - 1))
      fslroi ${INPUT} ${DIR_SCRATCH}/input_${VCOUNT}.nii.gz ${START} 1
    fi
  done
fi
VOLS=($(ls ${DIR_SCRATCH}/input_*))
N=${#VOLS[@]}

# threshold images -------------------------------------------------------------
unset LO HI OP
if [[ -n ${LT} ]]; then LO=${LT}; fi
if [[ -n ${LE} ]]; then LO=${LE}; fi
if [[ -n ${GT} ]]; then HI=${GT}; fi
if [[ -n ${GE} ]]; then HI=${GE}; fi
if [[ -n ${LO} ]] && [[ -n ${HI} ]]; then
  if [[ ${HI} -gt ${LO} ]]; then
    OP="-add"
  else
    OP="-mul"
  fi
fi

TMPNAN=${DIR_SCRATCH}/tempNaN.nii.gz
TMP=${DIR_SCRATCH}/temp.nii.gz
for (( i=0; i<${N}; i++ )); do
  FNAME=${VOLS[${i}]%%.*}
  MASK=${FNAME}_mask.nii.gz

  # convert NaNs to 0, but get mask of not NaN values to exclude from output
  fslmaths ${VOLS[${i}]} -nanm -binv ${TMPNAN}
  fslmaths ${VOLS[${i}]} -nan ${VOLS[${i}]}

  if [[ -n ${LT} ]]; then
    fslmaths ${VOLS[${i}]} -thr ${LT} -uthr ${LT} -binv ${TMP}
    fslmaths ${VOLS[${i}]} -uthr ${LT} -mas ${TMP} -bin ${MASK}
  fi

  if [[ -n ${LE} ]]; then
    fslmaths ${VOLS[${i}]} -uthr ${LE} -bin ${MASK}
  fi

  if [[ -n ${GE} ]]; then 
    fslmaths ${VOLS[${i}]} -thr ${GE} -bin ${TMP}
    if [[ -n ${OP} ]]; then
      fslmaths ${MASK} ${OP} ${TMP} ${MASK}
    else
      mv ${TMP} ${MASK}
    fi
  fi

  if [[ -n ${GT} ]]; then
    fslmaths ${VOLS[${i}]} -thr ${GT} -uthr ${GT} -binv ${TMP}
    fslmaths ${VOLS[${i}]} -thr ${GT} -mas ${TMP} -bin ${TMP}
    if [[ -n ${OP} ]]; then
      fslmaths ${MASK} ${OP} ${TMP} ${MASK}
    else
      mv ${TMP} ${MASK}
    fi
  fi

  if [[ -n ${EQ} ]]; then
    fslmaths ${VOLS[${i}]} -thr ${EQ} -uthr ${EQ} -bin -add ${MASK} ${MASK}
  fi

  if [[ -n ${NE} ]]; then
    fslmaths ${VOLS[${i}]} -thr ${NE} -uthr ${NE} -binv ${TMP}
    fslmaths ${VOLS[${i}]} -mas ${TMP} -binv ${TMP}
    fslmaths ${MASK} -mas ${TMP} ${MASK}
  fi

  fslmaths ${VOLS[${i}]} -mas ${MASK} -mas ${TMPNAN} ${FNAME}_thresh.nii.gz
done

# merge all files if more than one volume & save to final detination -----------
if [[ -z ${PREFIX} ]]; then PREFIX=${OUTPRE}_${VOLSTR}${OUTSUF}; fi

unset TLS
TLS=($(ls ${DIR_SCRATCH}/*_thresh.nii.gz))
if [[ ${#TLS[@]} -gt 1 ]]; then
  fslmerge -t ${PREFIX}.nii.gz ${TLS[@]}
else
  mv ${TLS[0]} ${PREFIX}.nii.gz
fi

if [[ "${BIN,,}" == "true" ]]; then
  unset TLS
  TLS=($(ls ${DIR_SCRATCH}/*_mask.nii.gz))
  if [[ ${#TLS[@]} -gt 1 ]]; then
    fslmerge -t ${PREFIX}_mask.nii.gz ${TLS[@]}
  else
    mv ${TLS[0]} ${PREFIX}_mask.nii.gz
  fi
fi

#===============================================================================
# End of Function
#===============================================================================
exit 0


