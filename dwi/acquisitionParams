#!/bin/bash -e
#===============================================================================
# Find acquisition parameters for DWI files
# Authors: Josh Cochran
# Date: 3/30/2020
#===============================================================================
PROC_START=$(date +%Y-%m-%dT%H:%M:%S%z)
FCN_NAME=($(basename "$0"))
DATE_SUFFIX=$(date +%Y%m%dT%H%M%S%N)
OPERATOR=$(whoami)
KERNEL="$(uname -s)"
HARDWARE="$(uname -m)"
HPC_Q=${QUEUE}
HPC_SLOTS=${NSLOTS}
KEEP=false
NO_LOG=false
umask 007

# actions on exit, write to logs, clean scratch
function egress {
  EXIT_CODE=$?
  PROC_STOP=$(date +%Y-%m-%dT%H:%M:%S%z)
  if [[ "${KEEP}" == "false" ]]; then
    if [[ -n ${DIR_SCRATCH} ]]; then
      if [[ -d ${DIR_SCRATCH} ]]; then
        if [[ "$(ls -A ${DIR_SCRATCH})" ]]; then
          rm -R ${DIR_SCRATCH}
        else
          rmdir ${DIR_SCRATCH}
        fi
      fi
    fi
  fi
  if [[ "${NO_LOG}" == "false" ]]; then
    unset LOGSTR
    LOGSTR="${OPERATOR},${DIR_PROJECT},${PID},${SID},${HARDWARE},${KERNEL},${HPC_Q},${HPC_SLOTS},${FCN_NAME},${PROC_START},${PROC_STOP},${EXIT_CODE}"
    writeLog --benchmark --string ${LOGSTR}
  fi
}
trap egress EXIT

# Parse inputs -----------------------------------------------------------------
OPTS=$(getopt -o hvl --long prefix:,\
dir-dwi:,\
help,verbose,no-log -n 'parse-options' -- "$@")
if [ $? != 0 ]; then
  echo "Failed parsing options" >&2
  exit 1
fi
eval set -- "$OPTS"

# Set default values for function ---------------------------------------------
PREFIX=
DIR_DWI=
VERBOSE=0
HELP=false

while true; do
  case "$1" in
    -h | --help) HELP=true ; shift ;;
    -v | --verbose) VERBOSE=1 ; shift ;;
    -l | --no-log) NO_LOG=true ; shift ;;
    --prefix) PREFIX="$2" ; shift 2 ;;
    --dir-dwi) DIR_DWI="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Usage Help ------------------------------------------------------------------
if [[ "${HELP}" == "true" ]]; then
  echo ''
  echo '------------------------------------------------------------------------'
  echo "Iowa Neuroimage Processing Core: ${FCN_NAME}"
  echo '------------------------------------------------------------------------'
  echo '  -h | --help              display command help'
  echo '  -v | --verbose           add verbose output to log file'
  echo '  -l | --no-log            disable writing to output log'
  echo '  --prefix                 scan prefix, default: sub-123_ses-1234abcd'
  echo '  --dir-dwi                location of the raw DWI data'
  echo ''
  NO_LOG=true
  exit 0
fi

#===============================================================================
# Start of Function
#===============================================================================
# Set up BIDs compliant variables and workspace --------------------------------
anyfile=($(ls ${DIR_DWI}/sub*.nii.gz))
DIR_PROJECT=$(getDir -i ${anyfile[0]})
PID=$(getField -i ${anyfile[0]} -f sub)
SID=$(getField -i ${anyfile[0]} -f ses)
if [[ -z "${PREFIX}" ]]; then
  PREFIX="sub-${PID}"
  if [[ -n ${SID} ]]; then
    PREFIX="${PREFIX}_ses-${SID}"
  fi
fi

# AcqParams + All bvec, bval, index --------------------------------------------
## + Merge files for All_B0 and All_dwi
#remove old files
if [[ -f ${DIR_DWI}/${PREFIX}_dwisAcqParams.txt ]]; then
  rm ${DIR_DWI}/${PREFIX}_dwisAcqParams.txt
fi
if [[ -f ${DIR_DWI}/${PREFIX}_B0sAcqParams.txt ]]; then
  rm ${DIR_DWI}/${PREFIX}_B0sAcqParams.txt
fi
if [[ -f ${DIR_DWI}/${PREFIX}.bvec ]]; then
  rm ${DIR_DWI}/${PREFIX}.bvec
fi
if [[ -f ${DIR_DWI}/${PREFIX}.bval ]]; then
  rm ${DIR_DWI}/${PREFIX}.bval
fi
if [[ -f ${DIR_DWI}/${PREFIX}_index.txt ]]; then
  rm ${DIR_DWI}/${PREFIX}_index.txt
fi

unset ACQ_LINE INDX TOTAL_BVALS TOTAL_XVALS TOTAL_YVALS TOTAL_ZVALS ALL_DWI_NAMES B0s
#set up variables
declare -a ALL_DWI_NAMES
declare -a ALL_HOME_DWI_NAMES
declare -a ALL_SCRATCH_NAMES
declare -a B0s
ACQ_LINE=1
INDX=""
TOTAL_BVALS=""
TOTAL_XVALS=""
TOTAL_YVALS=""
TOTAL_ZVALS=""

touch ${DIR_DWI}/${PREFIX}_dwisAcqParams.txt

#loop through DWI files to pull out info
for i in ${DIR_DWI}/*_dwi.nii.gz; do
  unset DTI_NAME B0s NUM_B0s PED_STRING PED_STRING PED EES_STRING EES
  unset ACQ_MPE_STRING ACQ_MPE READOUT_TIME NAME_BASE
  unset BVALS XVALS YVALS ZVALS PED_STRING PED_STRING PED
  unset EES_STRING EES ACQ_MPE_STRING ACQ_MPE READOUT_TIME
#pull the file name with and without file path
  NAME_BASE=$( basename $i )
  NAME_BASE=${NAME_BASE::-11}
  DTI_NAME=${i::-11}

#set up arrays with bvals
  B0s=($(cat ${DTI_NAME}_dwi.bval))
  NUM_B0s=0

  BVALS=($(cat ${DTI_NAME}_dwi.bval))
#creates a refrence for each bval to a different line of the acq param file, one line per image 
  for j in "${BVALS[@]}"; do
    INDX="${INDX} ${ACQ_LINE}"
  done

#seperate vector cordinateds into X Y & Z
  XVALS=($(sed "1q;d" ${DTI_NAME}_dwi.bvec))
  YVALS=($(sed "2q;d" ${DTI_NAME}_dwi.bvec))
  ZVALS=($(sed "3q;d" ${DTI_NAME}_dwi.bvec))

#add seperated bvecs & bvals to a running array for all images
  TOTAL_BVALS="${TOTAL_BVALS} ${BVALS[@]}"
  echo $TOTAL_BVALS
  TOTAL_XVALS="${TOTAL_XVALS} ${XVALS[@]}"
  TOTAL_YVALS="${TOTAL_YVALS} ${YVALS[@]}"
  TOTAL_ZVALS="${TOTAL_ZVALS} ${ZVALS[@]}"

#find scanner type from JSON file
  SCANNER_TYPE=$(grep '"Manufacturer"' ${DTI_NAME}_dwi.json | awk '{print $2}')
  SCANNER_TYPE=${SCANNER_TYPE::-1}
 # SCANNER_LOC=$(grep '"InstitutionName"' ${DTI_NAME}_dwi.json | awk '{print $2}')
 # SCANNER_LOC=${SCANNER_LOC::-1}

#find Phase encoding direction for the acq params file
  PED_STRING=$(grep '"PhaseEncodingDirection"' ${DTI_NAME}_dwi.json | awk '{print $2}')
  if [[ -z ${PED_STRING} ]]; then
    PED_STRING=$(grep '"PhaseEncodingAxis"' ${DTI_NAME}_dwi.json | awk '{print $2}')
  fi
  PED_STRING=${PED_STRING::-4}
  if [ -z $PED_STRING ]; then
    PED=1
  else
    PED=-1
  fi

#find effective echo spacing for acq param file, if philips scanner it requires some math
  EES_STRING=$(grep '"EffectiveEchoSpacing"' ${DTI_NAME}_dwi.json | awk '{print $2}')
  if [[ ${SCANNER_TYPE} == '"Philips"' ]]; then
    EES_STRING=$(grep '"PhilipsScaleSlope"' ${DTI_NAME}_dwi.json | awk '{print $2}')
  fi
  EES=${EES_STRING::-1}
  if [[ ${SCANNER_TYPE} == Philips ]]; then
    EES=$(echo "(${EES} / 10)" | bc -l)
  fi
  #"################################### preserve code highlighting on gitlab
#find acquisition matrix PE 
  ACQ_MPE_STRING=$(grep '"AcquisitionMatrixPE"' ${DTI_NAME}_dwi.json | awk '{print $2}')
  ACQ_MPE=${ACQ_MPE_STRING::-1}
#calculating the readout time 
  READOUT_TIME=$(echo "${EES} * ((${ACQ_MPE} / 2) - 1)" | bc -l)
  #"################################### preserve code highlighting on gitlab
#creating the line for the acq param file that this image corresponds to
  echo "0 ${PED} 0 ${READOUT_TIME}" >> ${DIR_DWI}/${PREFIX}_dwisAcqParams.txt
#adding to the acq line for the next image if one exists
  ACQ_LINE=$(echo "${ACQ_LINE} + 1" | bc -l)

#find B0s in file and give an acq param line to each one
  touch ${DIR_DWI}/${NAME_BASE}_B0sAcqParams.txt
  for j in "${B0s[@]}"; do
    k=$(echo "$j/10" | bc)
    #"################################### preserve code highlighting on gitlab
    if [ $k -eq 0 ]; then
      echo "0 ${PED} 0 ${READOUT_TIME}" >> ${DIR_DWI}/${NAME_BASE}_B0sAcqParams.txt
    fi
  done
  ALL_DWI_NAMES+=(${DIR_DWI}/${NAME_BASE})
  ALL_HOME_DWI_NAMES+=(${DTI_NAME})
  ALL_SCRATCH_NAMES+=(${DIR_DWI}/${NAME_BASE})
done

echo $INDX > ${DIR_DWI}/${PREFIX}_index.txt
echo $TOTAL_BVALS > ${DIR_DWI}/${PREFIX}.bval
echo $TOTAL_XVALS > ${DIR_DWI}/XVals.txt
echo $TOTAL_YVALS > ${DIR_DWI}/YVals.txt
echo $TOTAL_ZVALS > ${DIR_DWI}/ZVals.txt
cat ${DIR_DWI}/XVals.txt ${DIR_DWI}/YVals.txt ${DIR_DWI}/ZVals.txt >> ${DIR_DWI}/${PREFIX}.bvec

FIRST_NAME=${ALL_DWI_NAMES[0]}
FIRST_NAME2=${ALL_HOME_DWI_NAMES[0]}
FIRST_NAME3=${ALL_SCRATCH_NAMES[0]}

unset TEMP_B0_FILES TEMP_B0_ACQ_FILES TEMP_DWI_FILES
declare -a TEMP_B0_FILES
declare -a TEMP_B0_ACQ_FILES
declare -a TEMP_DWI_FILES

for j in ${ALL_DWI_NAMES[@]}; do
  if [ "${FIRST_NAME}" != "$j" ]; then
    TEMP_B0_FILES+=(${j}_dwi_B0+raw.nii.gz)
  fi
done
for j in ${ALL_HOME_DWI_NAMES[@]}; do
 if [ "${FIRST_NAME2}" != "$j" ]; then
    TEMP_DWI_FILES+=(${j}_dwi.nii.gz)
  fi
done
for j in ${ALL_SCRATCH_NAMES[@]}; do
 if [ "${FIRST_NAME3}" != "$j" ]; then
    TEMP_B0_ACQ_FILES+=(${j}_B0sAcqParams.txt)
  fi
done

fslmerge -t ${DIR_DWI}/${PREFIX}_B0s+raw.nii.gz ${FIRST_NAME}_dwi_B0+raw.nii.gz ${TEMP_B0_FILES[@]}
fslmerge -t ${DIR_DWI}/${PREFIX}_dwis.nii.gz ${FIRST_NAME2}_dwi.nii.gz ${TEMP_DWI_FILES[@]}

cat ${FIRST_NAME3}_B0sAcqParams.txt ${TEMP_B0_ACQ_FILES[@]} >> ${DIR_DWI}/${PREFIX}_B0sAcqParams.txt

#------------------------------------------------------------------------------
# End of Function
#------------------------------------------------------------------------------
exit 0

