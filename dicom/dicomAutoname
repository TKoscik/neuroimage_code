#!/bin/bash -e
#===============================================================================
# Convert DICOM to NIfTI1, designed to work with automatic XNAT downloads
# Authors: Timothy R. Koscik, PhD
# Date: 2021-01-21
#===============================================================================
PROC_START=$(date +%Y-%m-%dT%H:%M:%S%z)
FCN_NAME=($(basename "$0"))
DATE_SUFFIX=$(date +%Y%m%dT%H%M%S%N)
OPERATOR=$(whoami)
KERNEL="$(uname -s)"
HARDWARE="$(uname -m)"
HPC_Q=${QUEUE}
HPC_SLOTS=${NSLOTS}
NO_LOG=false
umask 007

# actions on exit, write to logs, clean scratch --------------------------------
function egress {
  EXIT_CODE=$?
  PROC_STOP=$(date +%Y-%m-%dT%H:%M:%S%z)
  if [[ "${NO_LOG}" == "false" ]]; then
    unset LOGSTR
    LOGSTR="${OPERATOR},${DIR_PROJECT},${PID},${SID},${HARDWARE},${KERNEL},${HPC_Q},${HPC_SLOTS},${FCN_NAME},${PROC_START},${PROC_STOP},${EXIT_CODE}"
    writeLog --benchmark --string ${LOGSTR}
  fi
}
trap egress EXIT

# Parse inputs -----------------------------------------------------------------
OPTS=$(getopt -o hvl --long \
dir-input:,lut-json:,dir-save:,dir-scratch:,\
help,verbose,no-log -n 'parse-options' -- "$@")
if [[ $? != 0 ]]; then
  echo "Failed parsing options" >&2
  exit 1
fi
eval set -- "$OPTS"

# Set default values for function ---------------------------------------------
DIR_INPUT=
LUT_JSON=${INC_LUT}/series_description.json
DIR_SCRATCH=${INC_SCRATCH}/dicomConversion_${DATE_SUFFIX}
DIR_SAVE=${INC_QC}/dicomConversion
HELP=false
VERBOSE=false

while true; do
  case "$1" in
    -h | --help) HELP=true ; shift ;;
    -v | --verbose) VERBOSE=true ; shift ;;
    -l | --no-log) NO_LOG=true ; shift ;;
    --dir-input) DIR_INPUT="$2" ; shift 2 ;;
    --lut-json) LUT_JSON="$2" ; shift 2 ;;
    --dir-save) DIR_SAVE="$2" ; shift 2 ;;
    --dir-scratch) DIR_SCRATCH="$2" ; shift 2 ;;
    -- ) shift ; break ;;
    * ) break ;;
  esac
done

# Usage Help -------------------------------------------------------------------
if [[ "${HELP}" == "true" ]]; then
  echo ''
  echo '------------------------------------------------------------------------'
  echo "Iowa Neuroimage Processing Core: ${FCN_NAME}"
  echo '------------------------------------------------------------------------'
  echo '  -h | --help              display command help'
  echo '  -v | --verbose           add verbose output to log file'
  echo '  -l | --no-log            disable writing to output log'
  echo '  --dir-input <value>      directory containing converted dicoms'
  echo '  --lut-json <value>       directory listing for json look up table of '
  echo '                           series descriptions. Formatted such that'
  echo '                           objects specifying the BIDS-compliant rawdata'
  echo '                           sub-directory, contain arrays with names'
  echo '                           corresponding to the file suffix (e.g.,'
  echo '                           acq-ACQ_modality), which each contain strings'
  echo '                           stripped of non-alphanumeric characters that'
  echo '                           correspond to all known series descriptions.'
  echo '                           Default: DIR_INC/lut/series_description.json'
  echo '  --dir-save <value>       directory to save output, default varies by function'
  echo '  --dir-scratch <value>    directory for temporary workspace'
  echo ''
  NO_LOG=true
  exit 0
fi

#===============================================================================
# Start of Function
#===============================================================================
# initialize variables ---------------------------------------------------------
F_ORIG=($(ls ${DIR_INPUT}/*.nii.gz))
NF=${#F_ORIG[@]}

unset PID SID SNUM DESC
for (( i=0; i<${NF}; i++ )); do
  FNAME=$(basename ${F_ORIG[${i}]})
  BNAME[${i}]=${FNAME%%.*}
  TMP=(${BNAME[${i}]//_x-x_/ })
  PID[${i}]=${TMP[1]}
  SID[${i}]=${TMP[2]}
  SNUM[${i}]=${TMP[3]}
  DESC[${i}]=${TMP[4]}
done

# match appropriate DICOM folder -----------------------------------------------
## match entirely based on series number
unset DIR_DICOM
TDIR=($(find ${DIR_INPUT} -type f -name '*.dcm*' -printf '%h\n' | sort -u))
for (( i=0; i<${NF}; i++ )); do
  DCHK="/${SNUM[${i}]}-"
  for (( j=0; j<${#TDIR[@]}; j++ )); do
    if [[ "${TDIR[${j}],,}" == *"${DCHK,,}"* ]]; then
      DIR_DICOM[${i}]=${TDIR[${j}]}
      break
    else
      DIR_DICOM[${i}]="not_found"
    fi
  done
done

# pull information from JSON FILES ---------------------------------------------
unset SERIES_DESC SERIES_NUM ECHO DIRECTION
for (( i=0; i<${NF}; i++ )); do
  JSON="${F_ORIG[${i}]%%.*}.json"
  SERIES_DESC+=($(jq ".SeriesDescription" < ${JSON} | tr -d '[],\n'))
  SERIES_NUM+=($(jq ".SeriesNumber" < ${JSON} | tr -d '[],\n'))
  ECHO+=($(jq ".EchoNumber" < ${JSON} | tr -d '[],\n'))
  echo ${ECHO[${i}]}
done

# Get info from series description look up table -------------------------------
unset SUBDIR SUFFIX
for (( i=0; i<${NF}; i++ )); do
  CHK_DESC=$(echo "${SERIES_DESC[${i}]}" | sed 's/[^a-zA-Z0-9]//g')
  LUT_FCN='LUT_DESC=($(cat '${LUT_JSON}
  LUT_FCN="${LUT_FCN} | jq 'to_entries[]"
  LUT_FCN=${LUT_FCN}' | {"key1": .key, "key2": .value'
  LUT_FCN=${LUT_FCN}' | to_entries[] | select( .value | index("'${CHK_DESC}'")) '
  LUT_FCN="${LUT_FCN} | .key }"
  LUT_FCN="${LUT_FCN} | [.key1, .key2]'"
  LUT_FCN="${LUT_FCN} | tr -d ' [],"'"'"'))"
  eval ${LUT_FCN}
  echo ${LUT_DESC[@]}
  if [[ -z ${LUT_DESC[@]} ]]; then
    SUBDIR=unk
    SUFFIX=unk
  else
    SUBDIR+=(${LUT_DESC[0]})
    SUFFIX+=(${LUT_DESC[1]})
  fi
done

# set autoname -----------------------------------------------------------------
## if ECHO is not null add echo flag
## if flow, then check series description for direction and add flag if found
unset F_AUTO
for (( i=0; i<${NF}; i++ )); do
  unset FTMP
  FTMP="sub-${PID[${i}]}_ses-${SID[$[i]]}_${SUFFIX[${i}]}"
  
  # add echo if present in JSON - - - - - - - - - - - - - - - - - - - - - - - -
  if [[ "${ECHO[${i}],,}" != "null" ]]; then
    FTMP=$(modField -i ${FTMP} -a -f echo -v ${ECHO[${i}]})
  fi
  
  ## modality specific processing below: = = = = = = = = = = = = = = = = = = = =
  MOD=$(getField -i ${SUFFIX[${i}]} -f modality)
  
  ### add direction flags for 4D Flow images - - - - - - - - - - - - - - - - - -
  ### remove echo flags from these
  if [[ "${MOD,,}" == "flow" ]]; then
    if [[ "${SERIES_DESC[${i}]}" == *"_LR_"* ]]; then
      FTMP=$(modField -i ${FTMP} -a -f dir -v LR)
      FTMP=$(modField -i ${FTMP} -r -f echo)
    elif [[ "${SERIES_DESC[${i}]}" == *"_AP_"* ]]; then
      FTMP=$(modField -i ${FTMP} -a -f dir -v AP)
      FTMP=$(modField -i ${FTMP} -r -f echo)
    elif [[ "${SERIES_DESC[${i}]}" == *"_SI_"* ]]; then
      FTMP=$(modField -i ${FTMP} -a -f dir -v SI)
      FTMP=$(modField -i ${FTMP} -r -f echo)
    fi
  fi
  
  ### add direction to FUNC, fields, and dwi - - - - - - - - - - - - - - - - - -
  if [[ "${MOD,,}" == "fieldmap" ]]\
  || [[ "${MOD,,}" == "spinecho" ]]\
  || [[ "${MOD,,}" == "bold" ]]\
  || [[ "${MOD,,}" == "dwi" ]]; then
    TDIRE=($(jq ".PhaseEncodingDirection" < ${F_ORIG[${i}]%%.*}.json | tr -d '[],\n'))
    TDIRE=${TDIRE//\"}
    if [[ "${TDIRE}" == "j" ]]; then
      FTMP=$(modField -i ${FTMP} -a -f dir -v fwd)
    elif [[ "${TDIRE}" == "j-" ]]; then
      FTMP=$(modField -i ${FTMP} -a -f dir -v rev)
    else
      TDIRE=${TDIRE//-/minus}
      FTMP=$(modField -i ${FTMP} -a -f dir -v ${TDIRE})
    fi
  fi
  
  ## save new file name to array - - - - - - - - - - - - - - - - - - - - - - - -
  F_AUTO+=(${FTMP})
  echo ${F_AUTO[${i}]}
done

# match bold derivatives to parent run -----------------------------------------
for (( i=0; i<${NF}; i++ )); do
  MOD=$(getField -i ${F_AUTO[${i}]} -f modality)
  if [[ "${MOD}" == "bold" ]]; then
    PROC=$(getField -i ${F_AUTO[${i}]} -f proc)
    if [[ "${PROC}" == "mean" ]]\
    || [[ "${PROC}" == "z" ]]; then
      SNTMP=${SERIES_NUM[${i}]}
      SNTMP=${SNTMP:0:1}
      unset IDX
      for (( j=0; j<${NF}; j++ )); do
        if [[ ${SNTMP} -eq ${SERIES_NUM[${j}]} ]]; then
          IDX=${j}
          break
        fi
      done
      TASK=$(getField -i ${F_AUTO[${IDX}]} -f task)
      F_AUTO[${i}]=$(modField -i ${F_AUTO[${i}]} -a -f task -v ${TASK})
      RUN=$(getField -i ${F_AUTO[${IDX}]} -f run)
      if [[ -n "${RUN}" ]]; then
        F_AUTO[${i}]=$(modField -i ${F_AUTO[${i}]} -a -f run -v ${RUN})
      fi
    fi
    echo ${F_AUTO[${i}]}
  fi
done

# check auto name for duplicates, add run --------------------------------------
for (( i=0; i<${NF}; i++ )); do
  unset SAMEIDX
  SAMEIDX=${i}
  F1=${F_AUTO[${i}]}
  CHK=$((${i}+1))
  for (( j=${CHK}; j<${NF}; j++ )); do
    F2=${F_AUTO[${j}]}
    if [[ "${F1}" == "${F2}" ]]; then
      SAMEIDX+=(${j})
    fi
  done
  if [[ ${#SAMEIDX[@]} -gt 1 ]]; then
    for (( j=0; j<${#SAMEIDX[@]}; j++ )); do
      RUN=$((${j}+1))
      F_AUTO[${SAMEIDX[${j}]}]=$(modField -i ${F_AUTO[${SAMEIDX[${j}]}]} -a -f run -v ${RUN})
      echo ${F_AUTO[${SAMEIDX[${j}]}]}
    done
  fi
done

# final Autonames
for (( i=0; i<${NF}; i++ )); do
  echo -e "ORIG:\t${BNAME[${i}]}"
  echo -e "NEW:\t${F_AUTO[${i}]}\n"
done

# rename output files --------------------------------------------------------
if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tauto-renaming files"; fi
for (( i=0; i<${NF}; i++ )); do
  rename "${BNAME[${i}]}" "${F_AUTO[${i}]}" ${DIR_INPUT}/*
done

# save output for QC ---------------------------------------------------------
QC_TSV=${DIR_INPUT}/sub-${PID[0]}_ses-${SID[0]}_dicomConversion.tsv
if [[ ! -f ${QC_TSV} ]]; then
  echo -e "dir_dicom\tseries_description\tscan_date\tfname_orig\tfname_auto\tfname_manual\tsubdir\tchk_view\tchk_orient\trate_quality\tqc_action\toperator\tqc_date\toperator2\tqc_date2" > ${QC_TSV}
  if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tinitializing ${DIR_INPUT}/sub-${PID}_ses-${SID}_dicomConversion.tsv"; fi
fi

for (( i=0; i<${NF}; i++ )); do
  echo -ne "${DIR_DICOM[${i}]}\t" >> ${QC_TSV}
  echo -ne "${SERIES_DESC[${i}]}\t" >> ${QC_TSV}
  echo -ne "${SID[${i}]}\t" >> ${QC_TSV}
  echo -ne "${BNAME[${i}]}\t" >> ${QC_TSV}
  echo -ne "sub-${PID[${i}]}_ses-${SID[${i}]}_${SUFFIX[${i}]}\t" >> ${QC_TSV}
  echo -ne "-\t" >> ${QC_TSV}
  echo -ne "${SUBDIR[${i}]}\t" >> ${QC_TSV}
  echo -ne "false\t" >> ${QC_TSV}
  echo -ne "false\t" >> ${QC_TSV}
  echo -ne "-\t" >> ${QC_TSV}
  echo -ne "-\t" >> ${QC_TSV}
  echo -ne "-\t" >> ${QC_TSV}
  echo -ne "-\t" >> ${QC_TSV}
  echo -ne "-\t" >> ${QC_TSV}
  echo -e "-" >> ${QC_TSV}
done
if [[ "${VERBOSE}" == "true" ]]; then echo -e "\tinfo written to tsv"; fi


if [[ "${VERBOSE}" == "true" ]]; then echo -e ">>>moving converted dicoms according to new names"; fi
mv ${DIR_INPUT} \
  ${DIR_SAVE}/pi-${PI}_project-${PROJECT}_sub-${PID}_ses-${SID}
if [[ "${VERBOSE}" == "true" ]]; then echo -e ">>>setting group ownership to Research-INC_img_core"; fi
chgrp -R Research-INC_img_core ${DIR_SAVE}/pi-${PI}_project-${PROJECT}_sub-${PID}_ses-${SID}
if [[ "${VERBOSE}" == "true" ]]; then echo -e ">>>setting permissions to 770"; fi
chmod -R 770 ${DIR_SAVE}/pi-${PI}_project-${PROJECT}_sub-${PID}_ses-${SID}

#===============================================================================
# End of Function
#===============================================================================
if [[ "${VERBOSE}" == "true" ]]; then echo -e "DONE"; fi
exit 0


